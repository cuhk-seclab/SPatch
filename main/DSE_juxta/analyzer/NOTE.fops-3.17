#
# fs/ops/flag
#
9p/xattr/security {
  .prefix             = XATTR_SECURITY_PREFIX,
  .get                = v9fs_xattr_security_get,
  .set                = v9fs_xattr_security_set,
};
9p/xattr/trusted {
  .prefix             = XATTR_TRUSTED_PREFIX,
  .get                = v9fs_xattr_trusted_get,
  .set                = v9fs_xattr_trusted_set,
};
9p/inode/dir {
  .create             = v9fs_vfs_create,
  .lookup             = v9fs_vfs_lookup,
  .atomic_open        = v9fs_vfs_atomic_open,
  .symlink            = v9fs_vfs_symlink,
  .link               = v9fs_vfs_link,
  .unlink             = v9fs_vfs_unlink,
  .mkdir              = v9fs_vfs_mkdir,
  .rmdir              = v9fs_vfs_rmdir,
  .mknod              = v9fs_vfs_mknod,
  .rename             = v9fs_vfs_rename,
  .getattr            = v9fs_vfs_getattr,
  .setattr            = v9fs_vfs_setattr,
};
9p/inode/file {
  .getattr            = v9fs_vfs_getattr,
  .setattr            = v9fs_vfs_setattr,
};
9p/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = v9fs_vfs_follow_link,
  .put_link           = v9fs_vfs_put_link,
  .getattr            = v9fs_vfs_getattr,
  .setattr            = v9fs_vfs_setattr,
};
9p/inode/dir {
  .read               = generic_read_dir,
  .llseek             = generic_file_llseek,
  .iterate            = v9fs_dir_readdir,
  .open               = v9fs_file_open,
  .release            = v9fs_dir_release,
};
9p/vm/file {
  .fault              = filemap_fault,
  .map_pages          = filemap_map_pages,
  .page_mkwrite       = v9fs_vm_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
v9fs_mmap/vm/file {
  .close              = v9fs_mmap_vm_close,
  .fault              = filemap_fault,
  .map_pages          = filemap_map_pages,
  .page_mkwrite       = v9fs_vm_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
9p/file/cached {
  .llseek             = generic_file_llseek,
  .read               = v9fs_cached_file_read,
  .write              = v9fs_cached_file_write,
  .read_iter          = generic_file_read_iter,
  .write_iter         = generic_file_write_iter,
  .open               = v9fs_file_open,
  .release            = v9fs_dir_release,
  .lock               = v9fs_file_lock_dotl,
  .flock              = v9fs_file_flock_dotl,
  .mmap               = v9fs_file_mmap,
  .fsync              = v9fs_file_fsync_dotl,
};
9p/file/file {
  .llseek             = generic_file_llseek,
  .read               = v9fs_file_read,
  .write              = v9fs_file_write,
  .open               = v9fs_file_open,
  .release            = v9fs_dir_release,
  .lock               = v9fs_file_lock,
  .mmap               = generic_file_readonly_mmap,
  .fsync              = v9fs_file_fsync,
};
9p/file/file {
  .llseek             = generic_file_llseek,
  .read               = v9fs_file_read,
  .write              = v9fs_file_write,
  .open               = v9fs_file_open,
  .release            = v9fs_dir_release,
  .lock               = v9fs_file_lock_dotl,
  .flock              = v9fs_file_flock_dotl,
  .mmap               = generic_file_readonly_mmap,
  .fsync              = v9fs_file_fsync_dotl,
};
v9fs_mmap/file/file {
  .llseek             = generic_file_llseek,
  .read               = v9fs_mmap_file_read,
  .write              = v9fs_mmap_file_write,
  .open               = v9fs_file_open,
  .release            = v9fs_dir_release,
  .lock               = v9fs_file_lock,
  .mmap               = v9fs_mmap_file_mmap,
  .fsync              = v9fs_file_fsync,
};
v9fs_mmap/file/file {
  .llseek             = generic_file_llseek,
  .read               = v9fs_mmap_file_read,
  .write              = v9fs_mmap_file_write,
  .open               = v9fs_file_open,
  .release            = v9fs_dir_release,
  .lock               = v9fs_file_lock_dotl,
  .flock              = v9fs_file_flock_dotl,
  .mmap               = v9fs_mmap_file_mmap,
  .fsync              = v9fs_file_fsync_dotl,
};
9p/xattr/access {
  .prefix             = POSIX_ACL_XATTR_ACCESS,
  .flags              = ACL_TYPE_ACCESS,
  .get                = v9fs_xattr_get_acl,
  .set                = v9fs_xattr_set_acl,
};
9p/xattr/default {
  .prefix             = POSIX_ACL_XATTR_DEFAULT,
  .flags              = ACL_TYPE_DEFAULT,
  .get                = v9fs_xattr_get_acl,
  .set                = v9fs_xattr_set_acl,
};
9p/addr/addr {
  .readpage           = v9fs_vfs_readpage,
  .readpages          = v9fs_vfs_readpages,
  .set_page_dirty     = __set_page_dirty_nobuffers,
  .writepage          = v9fs_vfs_writepage,
  .write_begin        = v9fs_write_begin,
  .write_end          = v9fs_write_end,
  .releasepage        = v9fs_release_page,
  .invalidatepage     = v9fs_invalidate_page,
  .launder_page       = v9fs_launder_page,
  .direct_IO          = v9fs_direct_IO,
};
9p/dentry/cached {
  .d_revalidate       = v9fs_lookup_revalidate,
  .d_weak_revalidate  = v9fs_lookup_revalidate,
  .d_delete           = v9fs_cached_dentry_delete,
  .d_release          = v9fs_dentry_release,
};
9p/dentry/dentry {
  .d_delete           = always_delete_dentry,
  .d_release          = v9fs_dentry_release,
};
9p/xattr/user {
  .prefix             = XATTR_USER_PREFIX,
  .get                = v9fs_xattr_user_get,
  .set                = v9fs_xattr_user_set,
};
9p/inode/dir {
  .create             = v9fs_vfs_create_dotl,
  .atomic_open        = v9fs_vfs_atomic_open_dotl,
  .lookup             = v9fs_vfs_lookup,
  .link               = v9fs_vfs_link_dotl,
  .symlink            = v9fs_vfs_symlink_dotl,
  .unlink             = v9fs_vfs_unlink,
  .mkdir              = v9fs_vfs_mkdir_dotl,
  .rmdir              = v9fs_vfs_rmdir,
  .mknod              = v9fs_vfs_mknod_dotl,
  .rename             = v9fs_vfs_rename,
  .getattr            = v9fs_vfs_getattr_dotl,
  .setattr            = v9fs_vfs_setattr_dotl,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .removexattr        = generic_removexattr,
  .listxattr          = v9fs_listxattr,
  .get_acl            = v9fs_iop_get_acl,
};
9p/inode/file {
  .getattr            = v9fs_vfs_getattr_dotl,
  .setattr            = v9fs_vfs_setattr_dotl,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .removexattr        = generic_removexattr,
  .listxattr          = v9fs_listxattr,
  .get_acl            = v9fs_iop_get_acl,
};
9p/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = v9fs_vfs_follow_link_dotl,
  .put_link           = v9fs_vfs_put_link,
  .getattr            = v9fs_vfs_getattr_dotl,
  .setattr            = v9fs_vfs_setattr_dotl,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .removexattr        = generic_removexattr,
  .listxattr          = v9fs_listxattr,
};
9p/super/super {
  .alloc_inode        = v9fs_alloc_inode,
  .destroy_inode      = v9fs_destroy_inode,
  .statfs             = v9fs_statfs,
  .drop_inode         = v9fs_drop_inode,
  .evict_inode        = v9fs_evict_inode,
  .show_options       = generic_show_options,
  .umount_begin       = v9fs_umount_begin,
  .write_inode        = v9fs_write_inode_dotl,
};
9p/fs/fs {
  .name               = "9p",
  .mount              = v9fs_mount,
  .kill_sb            = v9fs_kill_super,
  .owner              = THIS_MODULE,
  .fs_flags           = FS_RENAME_DOES_D_MOVE,
};
adfs/inode/dir {
  .read               = generic_read_dir,
  .llseek             = generic_file_llseek,
  .iterate            = adfs_readdir,
  .fsync              = generic_file_fsync,
};
adfs/dentry/dentry {
  .d_hash             = adfs_hash,
  .d_compare          = adfs_compare,
};
adfs/inode/dir {
  .lookup             = adfs_lookup,
  .setattr            = adfs_notify_change,
};
adfs/super/super {
  .alloc_inode        = adfs_alloc_inode,
  .destroy_inode      = adfs_destroy_inode,
  .write_inode        = adfs_write_inode,
  .put_super          = adfs_put_super,
  .statfs             = adfs_statfs,
  .remount_fs         = adfs_remount,
  .show_options       = adfs_show_options,
};
adfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "adfs",
  .mount              = adfs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
adfs/addr/addr {
  .readpage           = adfs_readpage,
  .writepage          = adfs_writepage,
  .write_begin        = adfs_write_begin,
  .write_end          = generic_write_end,
  .bmap               = _adfs_bmap
};
adfs/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .mmap               = generic_file_mmap,
  .fsync              = generic_file_fsync,
  .write              = new_sync_write,
  .write_iter         = generic_file_write_iter,
  .splice_read        = generic_file_splice_read,
};
adfs/inode/file {
  .setattr            = adfs_notify_change,
};
affs/dentry/dentry {
  .d_hash             = affs_hash_dentry,
  .d_compare          = affs_compare_dentry,
};
affs/inode/dir {
  .read               = generic_read_dir,
  .llseek             = generic_file_llseek,
  .iterate            = affs_readdir,
  .fsync              = affs_file_fsync,
};
affs/inode/dir {
  .create             = affs_create,
  .lookup             = affs_lookup,
  .link               = affs_link,
  .unlink             = affs_unlink,
  .symlink            = affs_symlink,
  .mkdir              = affs_mkdir,
  .rmdir              = affs_rmdir,
  .rename             = affs_rename,
  .setattr            = affs_notify_change,
};
affs/super/super {
  .alloc_inode        = affs_alloc_inode,
  .destroy_inode      = affs_destroy_inode,
  .write_inode        = affs_write_inode,
  .evict_inode        = affs_evict_inode,
  .put_super          = affs_put_super,
  .sync_fs            = affs_sync_fs,
  .statfs             = affs_statfs,
  .remount_fs         = affs_remount,
  .show_options       = generic_show_options,
};
affs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "affs",
  .mount              = affs_mount,
  .kill_sb            = affs_kill_sb,
  .fs_flags           = FS_REQUIRES_DEV,
};
affs/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .write              = new_sync_write,
  .write_iter         = generic_file_write_iter,
  .mmap               = generic_file_mmap,
  .open               = affs_file_open,
  .release            = affs_file_release,
  .fsync              = affs_file_fsync,
  .splice_read        = generic_file_splice_read,
};
affs/inode/file {
  .setattr            = affs_notify_change,
};
affs/addr/addr {
  .readpage           = affs_readpage,
  .writepage          = affs_writepage,
  .write_begin        = affs_write_begin,
  .write_end          = generic_write_end,
  .bmap               = _affs_bmap
};
affs/addr/addr {
  .readpage           = affs_readpage_ofs,
  .write_begin        = affs_write_begin_ofs,
  .write_end          = affs_write_end_ofs
};
affs_symlink/addr/addr {
  .readpage           = affs_symlink_readpage,
};
affs/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .setattr            = affs_notify_change,
};
file_lock_operations afs_lock_ops {
  .fl_copy_lock       = afs_fl_copy_lock,
  .fl_release_private = afs_fl_release_private,
};
afs_dir/file/file {
  .open               = afs_dir_open,
  .release            = afs_release,
  .iterate            = afs_readdir,
  .lock               = afs_lock,
  .llseek             = generic_file_llseek,
};
afs/inode/dir {
  .create             = afs_create,
  .lookup             = afs_lookup,
  .link               = afs_link,
  .unlink             = afs_unlink,
  .symlink            = afs_symlink,
  .mkdir              = afs_mkdir,
  .rmdir              = afs_rmdir,
  .rename             = afs_rename,
  .permission         = afs_permission,
  .getattr            = afs_getattr,
  .setattr            = afs_setattr,
};
afs_fs/dentry/dentry {
  .d_revalidate       = afs_d_revalidate,
  .d_delete           = afs_d_delete,
  .d_release          = afs_d_release,
  .d_automount        = afs_d_automount,
};
seq_operations afs_proc_cells_ops {
  .start              = afs_proc_cells_start,
  .next               = afs_proc_cells_next,
  .stop               = afs_proc_cells_stop,
  .show               = afs_proc_cells_show,
};
file_operations afs_proc_cells_fops {
  .open               = afs_proc_cells_open,
  .read               = seq_read,
  .write              = afs_proc_cells_write,
  .llseek             = seq_lseek,
  .release            = seq_release,
};
file_operations afs_proc_rootcell_fops {
  .read               = afs_proc_rootcell_read,
  .write              = afs_proc_rootcell_write,
  .llseek             = no_llseek,
};
seq_operations afs_proc_cell_volumes_ops {
  .start              = afs_proc_cell_volumes_start,
  .next               = afs_proc_cell_volumes_next,
  .stop               = afs_proc_cell_volumes_stop,
  .show               = afs_proc_cell_volumes_show,
};
file_operations afs_proc_cell_volumes_fops {
  .open               = afs_proc_cell_volumes_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
};
seq_operations afs_proc_cell_vlservers_ops {
  .start              = afs_proc_cell_vlservers_start,
  .next               = afs_proc_cell_vlservers_next,
  .stop               = afs_proc_cell_vlservers_stop,
  .show               = afs_proc_cell_vlservers_show,
};
file_operations afs_proc_cell_vlservers_fops {
  .open               = afs_proc_cell_vlservers_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
};
seq_operations afs_proc_cell_servers_ops {
  .start              = afs_proc_cell_servers_start,
  .next               = afs_proc_cell_servers_next,
  .stop               = afs_proc_cell_servers_stop,
  .show               = afs_proc_cell_servers_show,
};
file_operations afs_proc_cell_servers_fops {
  .open               = afs_proc_cell_servers_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
};
afs_mntpt/file/file {
  .open               = afs_mntpt_open,
  .llseek             = noop_llseek,
};
inode_operations afs_mntpt_inode_operations {
  .lookup             = afs_mntpt_lookup,
  .readlink           = page_readlink,
  .getattr            = afs_getattr,
};
inode_operations afs_autocell_inode_operations {
  .getattr            = afs_getattr,
};
afs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "afs",
  .mount              = afs_mount,
  .kill_sb            = afs_kill_super,
};
afs/super/super {
  .statfs             = afs_statfs,
  .alloc_inode        = afs_alloc_inode,
  .drop_inode         = afs_drop_inode,
  .destroy_inode      = afs_destroy_inode,
  .evict_inode        = afs_evict_inode,
  .show_options       = generic_show_options,
};
afs/file/file {
  .open               = afs_open,
  .release            = afs_release,
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = generic_file_read_iter,
  .write_iter         = afs_file_write,
  .mmap               = generic_file_readonly_mmap,
  .splice_read        = generic_file_splice_read,
  .fsync              = afs_fsync,
  .lock               = afs_lock,
  .flock              = afs_flock,
};
afs/inode/file {
  .getattr            = afs_getattr,
  .setattr            = afs_setattr,
  .permission         = afs_permission,
};
afs/addr/addr {
  .readpage           = afs_readpage,
  .readpages          = afs_readpages,
  .set_page_dirty     = afs_set_page_dirty,
  .launder_page       = afs_launder_page,
  .releasepage        = afs_releasepage,
  .invalidatepage     = afs_invalidatepage,
  .write_begin        = afs_write_begin,
  .write_end          = afs_write_end,
  .writepage          = afs_writepage,
  .writepages         = afs_writepages,
};
autofs4/file/file {
  .open               = dcache_dir_open,
  .release            = dcache_dir_close,
  .read               = generic_read_dir,
  .iterate            = dcache_readdir,
  .llseek             = dcache_dir_lseek,
  .unlocked_ioctl     = autofs4_root_ioctl,
  .compat_ioctl       = autofs4_root_compat_ioctl,
};
autofs4/inode/dir {
  .open               = autofs4_dir_open,
  .release            = dcache_dir_close,
  .read               = generic_read_dir,
  .iterate            = dcache_readdir,
  .llseek             = dcache_dir_lseek,
};
autofs4/inode/dir {
  .lookup             = autofs4_lookup,
  .unlink             = autofs4_dir_unlink,
  .symlink            = autofs4_dir_symlink,
  .mkdir              = autofs4_dir_mkdir,
  .rmdir              = autofs4_dir_rmdir,
};
autofs4/dentry/dentry {
  .d_automount        = autofs4_d_automount,
  .d_manage           = autofs4_d_manage,
  .d_release          = autofs4_dentry_release,
};
file_operations _dev_ioctl_fops {
  .unlocked_ioctl     = autofs_dev_ioctl,
  .compat_ioctl       = autofs_dev_ioctl_compat,
  .owner              = THIS_MODULE,
  .llseek             = noop_llseek,
};
autofs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "autofs",
  .mount              = autofs_mount,
  .kill_sb            = autofs4_kill_sb,
};
autofs4/super/super {
  .statfs             = simple_statfs,
  .show_options       = autofs4_show_options,
  .evict_inode        = autofs4_evict_inode,
};
autofs4/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = autofs4_follow_link
};
befs/super/super {
  .alloc_inode        = befs_alloc_inode,
  .destroy_inode      = befs_destroy_inode,
  .put_super          = befs_put_super,
  .statfs             = befs_statfs,
  .remount_fs         = befs_remount,
  .show_options       = generic_show_options,
};
befs/inode/dir {
  .read               = generic_read_dir,
  .iterate            = befs_readdir,
  .llseek             = generic_file_llseek,
};
befs/inode/dir {
  .lookup             = befs_lookup,
};
befs/addr/addr {
  .readpage           = befs_readpage,
  .bmap               = befs_bmap,
};
befs_fast/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = befs_fast_follow_link,
};
befs/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = befs_follow_link,
  .put_link           = kfree_put_link,
};
befs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "befs",
  .mount              = befs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
bfs/inode/dir {
  .read               = generic_read_dir,
  .iterate            = bfs_readdir,
  .fsync              = generic_file_fsync,
  .llseek             = generic_file_llseek,
};
inode_operations bfs_dir_inops {
  .create             = bfs_create,
  .lookup             = bfs_lookup,
  .link               = bfs_link,
  .unlink             = bfs_unlink,
  .rename             = bfs_rename,
};
bfs/super/super {
  .alloc_inode        = bfs_alloc_inode,
  .destroy_inode      = bfs_destroy_inode,
  .write_inode        = bfs_write_inode,
  .evict_inode        = bfs_evict_inode,
  .put_super          = bfs_put_super,
  .statfs             = bfs_statfs,
};
bfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "bfs",
  .mount              = bfs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
bfs/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .write              = new_sync_write,
  .write_iter         = generic_file_write_iter,
  .mmap               = generic_file_mmap,
  .splice_read        = generic_file_splice_read,
};
bfs/addr/addr {
  .readpage           = bfs_readpage,
  .writepage          = bfs_writepage,
  .write_begin        = bfs_write_begin,
  .write_end          = generic_write_end,
  .bmap               = bfs_bmap,
};
export_operations btrfs_export_ops {
  .encode_fh          = btrfs_encode_fh,
  .fh_to_dentry       = btrfs_fh_to_dentry,
  .fh_to_parent       = btrfs_fh_to_parent,
  .get_parent         = btrfs_get_parent,
  .get_name           = btrfs_get_name,
};
btrfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "btrfs",
  .mount              = btrfs_mount,
  .kill_sb            = btrfs_kill_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
btrfs/super/super {
  .drop_inode         = btrfs_drop_inode,
  .evict_inode        = btrfs_evict_inode,
  .put_super          = btrfs_put_super,
  .sync_fs            = btrfs_sync_fs,
  .show_options       = btrfs_show_options,
  .show_devname       = btrfs_show_devname,
  .write_inode        = btrfs_write_inode,
  .alloc_inode        = btrfs_alloc_inode,
  .destroy_inode      = btrfs_destroy_inode,
  .statfs             = btrfs_statfs,
  .remount_fs         = btrfs_remount,
  .freeze_fs          = btrfs_freeze,
  .unfreeze_fs        = btrfs_unfreeze,
};
btrfs/file/ctl {
  .unlocked_ioctl     = btrfs_control_ioctl,
  .compat_ioctl       = btrfs_control_ioctl,
  .owner              = THIS_MODULE,
  .llseek             = noop_llseek,
};
btrfs/vm/file {
  .fault              = filemap_fault,
  .map_pages          = filemap_map_pages,
  .page_mkwrite       = btrfs_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
btrfs/file/file {
  .llseek             = btrfs_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = generic_file_read_iter,
  .splice_read        = generic_file_splice_read,
  .write_iter         = btrfs_file_write_iter,
  .mmap               = btrfs_file_mmap,
  .open               = generic_file_open,
  .release            = btrfs_release_file,
  .fsync              = btrfs_sync_file,
  .fallocate          = btrfs_fallocate,
  .unlocked_ioctl     = btrfs_ioctl,
  .compat_ioctl       = btrfs_ioctl,
};
btrfs/inode/dir {
  .getattr            = btrfs_getattr,
  .lookup             = btrfs_lookup,
  .create             = btrfs_create,
  .unlink             = btrfs_unlink,
  .link               = btrfs_link,
  .mkdir              = btrfs_mkdir,
  .rmdir              = btrfs_rmdir,
  .rename2            = btrfs_rename2,
  .symlink            = btrfs_symlink,
  .setattr            = btrfs_setattr,
  .mknod              = btrfs_mknod,
  .setxattr           = btrfs_setxattr,
  .getxattr           = btrfs_getxattr,
  .listxattr          = btrfs_listxattr,
  .removexattr        = btrfs_removexattr,
  .permission         = btrfs_permission,
  .get_acl            = btrfs_get_acl,
  .set_acl            = btrfs_set_acl,
  .update_time        = btrfs_update_time,
  .tmpfile            = btrfs_tmpfile,
};
inode_operations btrfs_dir_ro_inode_operations {
  .lookup             = btrfs_lookup,
  .permission         = btrfs_permission,
  .get_acl            = btrfs_get_acl,
  .set_acl            = btrfs_set_acl,
  .update_time        = btrfs_update_time,
};
btrfs_dir/file/file {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = btrfs_real_readdir,
  .unlocked_ioctl     = btrfs_ioctl,
  .compat_ioctl       = btrfs_ioctl,
  .release            = btrfs_release_file,
  .fsync              = btrfs_sync_file,
};
btrfs/addr/addr {
  .readpage           = btrfs_readpage,
  .writepage          = btrfs_writepage,
  .writepages         = btrfs_writepages,
  .readpages          = btrfs_readpages,
  .direct_IO          = btrfs_direct_IO,
  .invalidatepage     = btrfs_invalidatepage,
  .releasepage        = btrfs_releasepage,
  .set_page_dirty     = btrfs_set_page_dirty,
  .error_remove_page  = generic_error_remove_page,
};
btrfs_symlink/addr/addr {
  .readpage           = btrfs_readpage,
  .writepage          = btrfs_writepage,
  .invalidatepage     = btrfs_invalidatepage,
  .releasepage        = btrfs_releasepage,
};
btrfs/inode/file {
  .getattr            = btrfs_getattr,
  .setattr            = btrfs_setattr,
  .setxattr           = btrfs_setxattr,
  .getxattr           = btrfs_getxattr,
  .listxattr          = btrfs_listxattr,
  .removexattr        = btrfs_removexattr,
  .permission         = btrfs_permission,
  .fiemap             = btrfs_fiemap,
  .get_acl            = btrfs_get_acl,
  .set_acl            = btrfs_set_acl,
  .update_time        = btrfs_update_time,
};
btrfs/inode/special {
  .getattr            = btrfs_getattr,
  .setattr            = btrfs_setattr,
  .permission         = btrfs_permission,
  .setxattr           = btrfs_setxattr,
  .getxattr           = btrfs_getxattr,
  .listxattr          = btrfs_listxattr,
  .removexattr        = btrfs_removexattr,
  .get_acl            = btrfs_get_acl,
  .set_acl            = btrfs_set_acl,
  .update_time        = btrfs_update_time,
};
btrfs/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .getattr            = btrfs_getattr,
  .setattr            = btrfs_setattr,
  .permission         = btrfs_permission,
  .setxattr           = btrfs_setxattr,
  .getxattr           = btrfs_getxattr,
  .listxattr          = btrfs_listxattr,
  .removexattr        = btrfs_removexattr,
  .update_time        = btrfs_update_time,
};
btrfs/dentry/dentry {
  .d_delete           = btrfs_dentry_delete,
  .d_release          = btrfs_dentry_release,
};
btree/addr/addr {
  .readpage           = btree_readpage,
  .writepages         = btree_writepages,
  .releasepage        = btree_releasepage,
  .invalidatepage     = btree_invalidatepage,
  .migratepage        = btree_migratepage,
  .set_page_dirty     = btree_set_page_dirty,
};
xattr_handler *btrfs_xattr_handlers[] {
&posix_acl_access_xattr_handler,
&posix_acl_default_xattr_handler,
NULL,
};
btrfs_test/super/super {
  .alloc_inode        = btrfs_alloc_inode,
  .destroy_inode      = btrfs_test_destroy_inode,
};
file_system_type test_type {
  .name               = "btrfs_test_fs",
  .mount              = btrfs_test_mount,
  .kill_sb            = kill_anon_super,
};
ceph/addr/addr {
  .readpage           = ceph_readpage,
  .readpages          = ceph_readpages,
  .writepage          = ceph_writepage,
  .writepages         = ceph_writepages_start,
  .write_begin        = ceph_write_begin,
  .write_end          = ceph_write_end,
  .set_page_dirty     = ceph_set_page_dirty,
  .invalidatepage     = ceph_invalidatepage,
  .releasepage        = ceph_releasepage,
  .direct_IO          = ceph_direct_io,
};
ceph/vm/vm {
  .fault              = ceph_filemap_fault,
  .page_mkwrite       = ceph_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
file_operations ceph_dir_fops {
  .read               = ceph_read_dir,
  .iterate            = ceph_readdir,
  .llseek             = ceph_dir_llseek,
  .open               = ceph_open,
  .release            = ceph_release,
  .unlocked_ioctl     = ceph_ioctl,
  .fsync              = ceph_dir_fsync,
};
inode_operations ceph_dir_iops {
  .lookup             = ceph_lookup,
  .permission         = ceph_permission,
  .getattr            = ceph_getattr,
  .setattr            = ceph_setattr,
  .setxattr           = ceph_setxattr,
  .getxattr           = ceph_getxattr,
  .listxattr          = ceph_listxattr,
  .removexattr        = ceph_removexattr,
  .get_acl            = ceph_get_acl,
  .set_acl            = ceph_set_acl,
  .mknod              = ceph_mknod,
  .symlink            = ceph_symlink,
  .mkdir              = ceph_mkdir,
  .link               = ceph_link,
  .unlink             = ceph_unlink,
  .rmdir              = ceph_unlink,
  .rename             = ceph_rename,
  .create             = ceph_create,
  .atomic_open        = ceph_atomic_open,
};
dentry_operations ceph_dentry_ops {
  .d_revalidate       = ceph_d_revalidate,
  .d_release          = ceph_d_release,
  .d_prune            = ceph_d_prune,
};
dentry_operations ceph_snapdir_dentry_ops {
  .d_revalidate       = ceph_snapdir_d_revalidate,
  .d_release          = ceph_d_release,
};
dentry_operations ceph_snap_dentry_ops {
  .d_release          = ceph_d_release,
  .d_prune            = ceph_d_prune,
};
export_operations ceph_export_ops {
  .encode_fh          = ceph_encode_fh,
  .fh_to_dentry       = ceph_fh_to_dentry,
  .fh_to_parent       = ceph_fh_to_parent,
  .get_parent         = ceph_get_parent,
  .get_name           = ceph_get_name,
};
ceph/super/super {
  .alloc_inode        = ceph_alloc_inode,
  .destroy_inode      = ceph_destroy_inode,
  .write_inode        = ceph_write_inode,
  .drop_inode         = ceph_drop_inode,
  .sync_fs            = ceph_sync_fs,
  .put_super          = ceph_put_super,
  .show_options       = ceph_show_options,
  .statfs             = ceph_statfs,
  .umount_begin       = ceph_umount_begin,
};
ceph/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "ceph",
  .mount              = ceph_mount,
  .kill_sb            = ceph_kill_sb,
  .fs_flags           = FS_RENAME_DOES_D_MOVE,
};
inode_operations ceph_file_iops {
  .permission         = ceph_permission,
  .setattr            = ceph_setattr,
  .getattr            = ceph_getattr,
  .setxattr           = ceph_setxattr,
  .getxattr           = ceph_getxattr,
  .listxattr          = ceph_listxattr,
  .removexattr        = ceph_removexattr,
  .get_acl            = ceph_get_acl,
  .set_acl            = ceph_set_acl,
};
inode_operations ceph_symlink_iops {
  .readlink           = generic_readlink,
  .follow_link        = ceph_sym_follow_link,
  .setattr            = ceph_setattr,
  .getattr            = ceph_getattr,
  .setxattr           = ceph_setxattr,
  .getxattr           = ceph_getxattr,
  .listxattr          = ceph_listxattr,
  .removexattr        = ceph_removexattr,
};
file_operations ceph_file_fops {
  .open               = ceph_open,
  .release            = ceph_release,
  .llseek             = ceph_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = ceph_read_iter,
  .write_iter         = ceph_write_iter,
  .mmap               = ceph_mmap,
  .fsync              = ceph_fsync,
  .lock               = ceph_lock,
  .flock              = ceph_flock,
  .splice_read        = generic_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .unlocked_ioctl     = ceph_ioctl,
  .compat_ioctl       = ceph_ioctl,
  .fallocate          = ceph_fallocate,
};
xattr_handler *ceph_xattr_handlers[] {
&posix_acl_access_xattr_handler,
&posix_acl_default_xattr_handler,
NULL,
};
dentry_operations cifs_dentry_ops {
  .d_revalidate       = cifs_d_revalidate,
  .d_automount        = cifs_dfs_d_automount,
};
dentry_operations cifs_ci_dentry_ops {
  .d_revalidate       = cifs_d_revalidate,
  .d_hash             = cifs_ci_hash,
  .d_compare          = cifs_ci_compare,
  .d_automount        = cifs_dfs_d_automount,
};
export_operations cifs_export_ops {
  .get_parent         = cifs_get_parent,
};
cifs/super/super {
  .statfs             = cifs_statfs,
  .alloc_inode        = cifs_alloc_inode,
  .destroy_inode      = cifs_destroy_inode,
  .drop_inode         = cifs_drop_inode,
  .evict_inode        = cifs_evict_inode,
  .show_options       = cifs_show_options,
  .umount_begin       = cifs_umount_begin,
  .remount_fs         = cifs_remount,
  .show_stats         = cifs_show_stats,
};
cifs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "cifs",
  .mount              = cifs_do_mount,
  .kill_sb            = cifs_kill_sb,
};
inode_operations cifs_dir_inode_ops {
  .create             = cifs_create,
  .atomic_open        = cifs_atomic_open,
  .lookup             = cifs_lookup,
  .getattr            = cifs_getattr,
  .unlink             = cifs_unlink,
  .link               = cifs_hardlink,
  .mkdir              = cifs_mkdir,
  .rmdir              = cifs_rmdir,
  .rename2            = cifs_rename2,
  .permission         = cifs_permission,
  .setattr            = cifs_setattr,
  .symlink            = cifs_symlink,
  .mknod              = cifs_mknod,
  .setxattr           = cifs_setxattr,
  .getxattr           = cifs_getxattr,
  .listxattr          = cifs_listxattr,
  .removexattr        = cifs_removexattr,
};
inode_operations cifs_file_inode_ops {
  .setattr            = cifs_setattr,
  .getattr            = cifs_getattr,
  .permission         = cifs_permission,
  .setxattr           = cifs_setxattr,
  .getxattr           = cifs_getxattr,
  .listxattr          = cifs_listxattr,
  .removexattr        = cifs_removexattr,
};
inode_operations cifs_symlink_inode_ops {
  .readlink           = generic_readlink,
  .follow_link        = cifs_follow_link,
  .put_link           = kfree_put_link,
  .permission         = cifs_permission,
  .setxattr           = cifs_setxattr,
  .getxattr           = cifs_getxattr,
  .listxattr          = cifs_listxattr,
  .removexattr        = cifs_removexattr,
};
file_operations cifs_file_ops {
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = cifs_loose_read_iter,
  .write_iter         = cifs_file_write_iter,
  .open               = cifs_open,
  .release            = cifs_close,
  .lock               = cifs_lock,
  .fsync              = cifs_fsync,
  .flush              = cifs_flush,
  .mmap               = cifs_file_mmap,
  .splice_read        = generic_file_splice_read,
  .llseek             = cifs_llseek,
  .unlocked_ioctl     = cifs_ioctl,
  .setlease           = cifs_setlease,
  .fallocate          = cifs_fallocate,
};
file_operations cifs_file_strict_ops {
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = cifs_strict_readv,
  .write_iter         = cifs_strict_writev,
  .open               = cifs_open,
  .release            = cifs_close,
  .lock               = cifs_lock,
  .fsync              = cifs_strict_fsync,
  .flush              = cifs_flush,
  .mmap               = cifs_file_strict_mmap,
  .splice_read        = generic_file_splice_read,
  .llseek             = cifs_llseek,
  .unlocked_ioctl     = cifs_ioctl,
  .setlease           = cifs_setlease,
  .fallocate          = cifs_fallocate,
};
file_operations cifs_file_direct_ops {
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = cifs_user_readv,
  .write_iter         = cifs_user_writev,
  .open               = cifs_open,
  .release            = cifs_close,
  .lock               = cifs_lock,
  .fsync              = cifs_fsync,
  .flush              = cifs_flush,
  .mmap               = cifs_file_mmap,
  .splice_read        = generic_file_splice_read,
  .unlocked_ioctl     = cifs_ioctl,
  .llseek             = cifs_llseek,
  .setlease           = cifs_setlease,
  .fallocate          = cifs_fallocate,
};
file_operations cifs_file_nobrl_ops {
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = cifs_loose_read_iter,
  .write_iter         = cifs_file_write_iter,
  .open               = cifs_open,
  .release            = cifs_close,
  .fsync              = cifs_fsync,
  .flush              = cifs_flush,
  .mmap               = cifs_file_mmap,
  .splice_read        = generic_file_splice_read,
  .llseek             = cifs_llseek,
  .unlocked_ioctl     = cifs_ioctl,
  .setlease           = cifs_setlease,
  .fallocate          = cifs_fallocate,
};
file_operations cifs_file_strict_nobrl_ops {
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = cifs_strict_readv,
  .write_iter         = cifs_strict_writev,
  .open               = cifs_open,
  .release            = cifs_close,
  .fsync              = cifs_strict_fsync,
  .flush              = cifs_flush,
  .mmap               = cifs_file_strict_mmap,
  .splice_read        = generic_file_splice_read,
  .llseek             = cifs_llseek,
  .unlocked_ioctl     = cifs_ioctl,
  .setlease           = cifs_setlease,
  .fallocate          = cifs_fallocate,
};
file_operations cifs_file_direct_nobrl_ops {
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = cifs_user_readv,
  .write_iter         = cifs_user_writev,
  .open               = cifs_open,
  .release            = cifs_close,
  .fsync              = cifs_fsync,
  .flush              = cifs_flush,
  .mmap               = cifs_file_mmap,
  .splice_read        = generic_file_splice_read,
  .unlocked_ioctl     = cifs_ioctl,
  .llseek             = cifs_llseek,
  .setlease           = cifs_setlease,
  .fallocate          = cifs_fallocate,
};
file_operations cifs_dir_ops {
  .iterate            = cifs_readdir,
  .release            = cifs_closedir,
  .read               = generic_read_dir,
  .unlocked_ioctl     = cifs_ioctl,
  .llseek             = generic_file_llseek,
};
inode_operations cifs_ipc_inode_ops {
  .lookup             = cifs_lookup,
};
cifs/vm/file {
  .fault              = filemap_fault,
  .map_pages          = filemap_map_pages,
  .page_mkwrite       = cifs_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
address_space_operations cifs_addr_ops {
  .readpage           = cifs_readpage,
  .readpages          = cifs_readpages,
  .writepage          = cifs_writepage,
  .writepages         = cifs_writepages,
  .write_begin        = cifs_write_begin,
  .write_end          = cifs_write_end,
  .set_page_dirty     = __set_page_dirty_nobuffers,
  .releasepage        = cifs_release_page,
  .direct_IO          = cifs_direct_io,
  .invalidatepage     = cifs_invalidate_page,
  .launder_page       = cifs_launder_page,
};
address_space_operations cifs_addr_ops_smallbuf {
  .readpage           = cifs_readpage,
  .writepage          = cifs_writepage,
  .writepages         = cifs_writepages,
  .write_begin        = cifs_write_begin,
  .write_end          = cifs_write_end,
  .set_page_dirty     = __set_page_dirty_nobuffers,
  .releasepage        = cifs_release_page,
  .invalidatepage     = cifs_invalidate_page,
  .launder_page       = cifs_launder_page,
};
file_operations cifs_debug_data_proc_fops {
  .owner              = THIS_MODULE,
  .open               = cifs_debug_data_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations cifs_stats_proc_fops {
  .owner              = THIS_MODULE,
  .open               = cifs_stats_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
  .write              = cifs_stats_proc_write,
};
file_operations cifsFYI_proc_fops {
  .owner              = THIS_MODULE,
  .open               = cifsFYI_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
  .write              = cifsFYI_proc_write,
};
file_operations cifs_linux_ext_proc_fops {
  .owner              = THIS_MODULE,
  .open               = cifs_linux_ext_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
  .write              = cifs_linux_ext_proc_write,
};
file_operations cifs_lookup_cache_proc_fops {
  .owner              = THIS_MODULE,
  .open               = cifs_lookup_cache_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
  .write              = cifs_lookup_cache_proc_write,
};
file_operations traceSMB_proc_fops {
  .owner              = THIS_MODULE,
  .open               = traceSMB_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
  .write              = traceSMB_proc_write,
};
file_operations cifs_security_flags_proc_fops {
  .owner              = THIS_MODULE,
  .open               = cifs_security_flags_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
  .write              = cifs_security_flags_proc_write,
};
inode_operations cifs_dfs_referral_inode_operations {
};
coda/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = coda_readdir,
  .open               = coda_open,
  .release            = coda_release,
  .fsync              = coda_fsync,
};
coda/inode/file {
  .permission         = coda_permission,
  .getattr            = coda_getattr,
  .setattr            = coda_setattr,
};
coda/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "coda",
  .mount              = coda_mount,
  .kill_sb            = kill_anon_super,
  .fs_flags           = FS_BINARY_MOUNTDATA,
};
coda/file/file {
  .llseek             = generic_file_llseek,
  .read               = coda_file_read,
  .write              = coda_file_write,
  .mmap               = coda_file_mmap,
  .open               = coda_open,
  .release            = coda_release,
  .fsync              = coda_fsync,
  .splice_read        = coda_file_splice_read,
};
file_operations coda_psdev_fops {
  .owner              = THIS_MODULE,
  .read               = coda_psdev_read,
  .write              = coda_psdev_write,
  .poll               = coda_psdev_poll,
  .unlocked_ioctl     = coda_psdev_ioctl,
  .open               = coda_psdev_open,
  .release            = coda_psdev_release,
  .llseek             = noop_llseek,
};
inode_operations coda_ioctl_inode_operations {
  .permission         = coda_ioctl_permission,
  .setattr            = coda_setattr,
};
file_operations coda_ioctl_operations {
  .owner              = THIS_MODULE,
  .unlocked_ioctl     = coda_pioctl,
  .llseek             = noop_llseek,
};
coda_symlink/addr/addr {
  .readpage           = coda_symlink_filler,
};
coda/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .setattr            = coda_setattr,
};
dentry_operations configfs_dentry_ops {
  .d_iput             = configfs_d_iput,
  .d_delete           = always_delete_dentry,
};
configfs/inode/dir {
  .mkdir              = configfs_mkdir,
  .rmdir              = configfs_rmdir,
  .symlink            = configfs_symlink,
  .unlink             = configfs_unlink,
  .lookup             = configfs_lookup,
  .setattr            = configfs_setattr,
};
inode_operations configfs_root_inode_operations {
  .lookup             = configfs_lookup,
  .setattr            = configfs_setattr,
};
configfs/inode/dir {
  .open               = configfs_dir_open,
  .release            = configfs_dir_close,
  .llseek             = configfs_dir_lseek,
  .read               = generic_read_dir,
  .iterate            = configfs_readdir,
};
configfs/addr/addr {
  .readpage           = simple_readpage,
  .write_begin        = simple_write_begin,
  .write_end          = simple_write_end,
};
inode_operations configfs_inode_operations ={
  .setattr            = configfs_setattr,
};
super_operations configfs_ops {
  .statfs             = simple_statfs,
  .drop_inode         = generic_delete_inode,
};
configfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "configfs",
  .mount              = configfs_do_mount,
  .kill_sb            = kill_litter_super,
};
configfs/file/file {
  .read               = configfs_read_file,
  .write              = configfs_write_file,
  .llseek             = generic_file_llseek,
  .open               = configfs_open_file,
  .release            = configfs_release,
};
configfs/inode/symlink {
  .follow_link        = configfs_follow_link,
  .readlink           = generic_readlink,
  .put_link           = configfs_put_link,
  .setattr            = configfs_setattr,
};
cramfs/addr/addr {
  .readpage           = cramfs_readpage
};
file_operations cramfs_directory_operations {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = cramfs_readdir,
};
cramfs/inode/dir {
  .lookup             = cramfs_lookup,
};
super_operations cramfs_ops {
  .remount_fs         = cramfs_remount,
  .statfs             = cramfs_statfs,
};
cramfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "cramfs",
  .mount              = cramfs_mount,
  .kill_sb            = cramfs_kill_sb,
  .fs_flags           = FS_REQUIRES_DEV,
};
debugfs/super/super {
  .statfs             = simple_statfs,
  .remount_fs         = debugfs_remount,
  .show_options       = debugfs_show_options,
};
debug/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "debugfs",
  .mount              = debug_mount,
  .kill_sb            = kill_litter_super,
};
debugfs/file/file {
  .read               = default_read_file,
  .write              = default_write_file,
  .open               = simple_open,
  .llseek             = noop_llseek,
};
inode_operations debugfs_link_operations {
  .readlink           = generic_readlink,
  .follow_link        = debugfs_follow_link,
};
file_operations fops_bool {
  .read               = read_file_bool,
  .write              = write_file_bool,
  .open               = simple_open,
  .llseek             = default_llseek,
};
file_operations fops_blob {
  .read               = read_file_blob,
  .open               = simple_open,
  .llseek             = default_llseek,
};
file_operations u32_array_fops {
  .owner              = THIS_MODULE,
  .open               = u32_array_open,
  .release            = u32_array_release,
  .read               = u32_array_read,
  .llseek             = no_llseek,
};
file_operations fops_regset32 {
  .open               = debugfs_open_regset32,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
devpts/super/super {
  .statfs             = simple_statfs,
  .remount_fs         = devpts_remount,
  .show_options       = devpts_show_options,
};
devpts/fs/fs {
  .name               = "devpts",
  .mount              = devpts_mount,
  .kill_sb            = devpts_kill_sb,
  .fs_flags           = FS_USERNS_MOUNT | FS_USERNS_DEV_MOUNT,
};
file_operations device_fops {
  .open               = device_open,
  .release            = device_close,
  .read               = device_read,
  .write              = device_write,
  .poll               = device_poll,
  .owner              = THIS_MODULE,
  .llseek             = noop_llseek,
};
file_operations ctl_device_fops {
  .open               = ctl_device_open,
  .release            = ctl_device_close,
  .read               = device_read,
  .write              = device_write,
  .owner              = THIS_MODULE,
  .llseek             = noop_llseek,
};
file_operations monitor_device_fops {
  .open               = monitor_device_open,
  .release            = monitor_device_close,
  .owner              = THIS_MODULE,
  .llseek             = noop_llseek,
};
seq_operations format1_seq_ops {
  .start              = table_seq_start,
  .next               = table_seq_next,
  .stop               = table_seq_stop,
  .show               = table_seq_show,
};
seq_operations format2_seq_ops {
  .start              = table_seq_start,
  .next               = table_seq_next,
  .stop               = table_seq_stop,
  .show               = table_seq_show,
};
seq_operations format3_seq_ops {
  .start              = table_seq_start,
  .next               = table_seq_next,
  .stop               = table_seq_stop,
  .show               = table_seq_show,
};
seq_operations format4_seq_ops {
  .start              = table_seq_start,
  .next               = table_seq_next,
  .stop               = table_seq_stop,
  .show               = table_seq_show,
};
file_operations format1_fops {
  .owner              = THIS_MODULE,
  .open               = table_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release
};
file_operations format2_fops {
  .owner              = THIS_MODULE,
  .open               = table_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release
};
file_operations format3_fops {
  .owner              = THIS_MODULE,
  .open               = table_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release
};
file_operations format4_fops {
  .owner              = THIS_MODULE,
  .open               = table_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release
};
file_operations waiters_fops {
  .owner              = THIS_MODULE,
  .open               = simple_open,
  .read               = waiters_read,
  .llseek             = default_llseek,
};
file_operations dev_fops {
  .read               = dev_read,
  .write              = dev_write,
  .poll               = dev_poll,
  .owner              = THIS_MODULE,
  .llseek             = noop_llseek,
};
sysfs_ops dlm_attr_ops {
  .show               = dlm_attr_show,
  .store              = dlm_attr_store,
};
ecryptfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "ecryptfs",
  .mount              = ecryptfs_mount,
  .kill_sb            = ecryptfs_kill_block_super,
};
dentry_operations ecryptfs_dops {
  .d_revalidate       = ecryptfs_d_revalidate,
  .d_release          = ecryptfs_d_release,
};
ecryptfs/addr/addr {
  .writepage          = ecryptfs_writepage,
  .readpage           = ecryptfs_readpage,
  .write_begin        = ecryptfs_write_begin,
  .write_end          = ecryptfs_write_end,
  .bmap               = ecryptfs_bmap,
};
ecryptfs/super/super {
  .alloc_inode        = ecryptfs_alloc_inode,
  .destroy_inode      = ecryptfs_destroy_inode,
  .statfs             = ecryptfs_statfs,
  .evict_inode        = ecryptfs_evict_inode,
  .show_options       = ecryptfs_show_options
};
inode_operations ecryptfs_symlink_iops {
  .readlink           = generic_readlink,
  .follow_link        = ecryptfs_follow_link,
  .put_link           = kfree_put_link,
  .permission         = ecryptfs_permission,
  .setattr            = ecryptfs_setattr,
  .getattr            = ecryptfs_getattr_link,
  .setxattr           = ecryptfs_setxattr,
  .getxattr           = ecryptfs_getxattr,
  .listxattr          = ecryptfs_listxattr,
  .removexattr        = ecryptfs_removexattr
};
inode_operations ecryptfs_dir_iops {
  .create             = ecryptfs_create,
  .lookup             = ecryptfs_lookup,
  .link               = ecryptfs_link,
  .unlink             = ecryptfs_unlink,
  .symlink            = ecryptfs_symlink,
  .mkdir              = ecryptfs_mkdir,
  .rmdir              = ecryptfs_rmdir,
  .mknod              = ecryptfs_mknod,
  .rename             = ecryptfs_rename,
  .permission         = ecryptfs_permission,
  .setattr            = ecryptfs_setattr,
  .setxattr           = ecryptfs_setxattr,
  .getxattr           = ecryptfs_getxattr,
  .listxattr          = ecryptfs_listxattr,
  .removexattr        = ecryptfs_removexattr
};
inode_operations ecryptfs_main_iops {
  .permission         = ecryptfs_permission,
  .setattr            = ecryptfs_setattr,
  .getattr            = ecryptfs_getattr,
  .setxattr           = ecryptfs_setxattr,
  .getxattr           = ecryptfs_getxattr,
  .listxattr          = ecryptfs_listxattr,
  .removexattr        = ecryptfs_removexattr
};
file_operations ecryptfs_dir_fops {
  .iterate            = ecryptfs_readdir,
  .read               = generic_read_dir,
  .unlocked_ioctl     = ecryptfs_unlocked_ioctl,
  .compat_ioctl       = ecryptfs_compat_ioctl,
  .open               = ecryptfs_open,
  .flush              = ecryptfs_flush,
  .release            = ecryptfs_release,
  .fsync              = ecryptfs_fsync,
  .fasync             = ecryptfs_fasync,
  .splice_read        = generic_file_splice_read,
  .llseek             = default_llseek,
};
file_operations ecryptfs_main_fops {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .read_iter          = ecryptfs_read_update_atime,
  .write              = new_sync_write,
  .write_iter         = generic_file_write_iter,
  .iterate            = ecryptfs_readdir,
  .unlocked_ioctl     = ecryptfs_unlocked_ioctl,
  .compat_ioctl       = ecryptfs_compat_ioctl,
  .mmap               = generic_file_mmap,
  .open               = ecryptfs_open,
  .flush              = ecryptfs_flush,
  .release            = ecryptfs_release,
  .fsync              = ecryptfs_fsync,
  .fasync             = ecryptfs_fasync,
  .splice_read        = generic_file_splice_read,
};
file_operations ecryptfs_miscdev_fops {
  .owner              = THIS_MODULE,
  .open               = ecryptfs_miscdev_open,
  .poll               = ecryptfs_miscdev_poll,
  .read               = ecryptfs_miscdev_read,
  .write              = ecryptfs_miscdev_write,
  .release            = ecryptfs_miscdev_release,
  .llseek             = noop_llseek,
};
super_operations efivarfs_ops {
  .statfs             = simple_statfs,
  .drop_inode         = generic_delete_inode,
  .evict_inode        = efivarfs_evict_inode,
  .show_options       = generic_show_options,
};
dentry_operations efivarfs_d_ops {
  .d_compare          = efivarfs_d_compare,
  .d_hash             = efivarfs_d_hash,
  .d_delete           = always_delete_dentry,
};
file_system_type efivarfs_type {
  .name               = "efivarfs",
  .mount              = efivarfs_mount,
  .kill_sb            = efivarfs_kill_sb,
};
efivarfs/inode/dir {
  .lookup             = simple_lookup,
  .unlink             = efivarfs_unlink,
  .create             = efivarfs_create,
};
efivarfs/file/file {
  .open               = simple_open,
  .read               = efivarfs_file_read,
  .write              = efivarfs_file_write,
  .llseek             = no_llseek,
};
efs/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = efs_readdir,
};
efs/inode/dir {
  .lookup             = efs_lookup,
};
efs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "efs",
  .mount              = efs_mount,
  .kill_sb            = efs_kill_sb,
  .fs_flags           = FS_REQUIRES_DEV,
};
super_operations efs_superblock_operations {
  .alloc_inode        = efs_alloc_inode,
  .destroy_inode      = efs_destroy_inode,
  .statfs             = efs_statfs,
  .remount_fs         = efs_remount,
};
export_operations efs_export_ops {
  .fh_to_dentry       = efs_fh_to_dentry,
  .fh_to_parent       = efs_fh_to_parent,
  .get_parent         = efs_get_parent,
};
efs/addr/addr {
  .readpage           = efs_readpage,
  .bmap               = _efs_bmap
};
efs_symlink/addr/addr {
  .readpage           = efs_symlink_readpage
};
exofs/inode/dir {
  .create             = exofs_create,
  .lookup             = exofs_lookup,
  .link               = exofs_link,
  .unlink             = exofs_unlink,
  .symlink            = exofs_symlink,
  .mkdir              = exofs_mkdir,
  .rmdir              = exofs_rmdir,
  .mknod              = exofs_mknod,
  .rename             = exofs_rename,
  .setattr            = exofs_setattr,
};
exofs/inode/special {
  .setattr            = exofs_setattr,
};
exofs/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = exofs_readdir,
};
exofs/super/super {
  .alloc_inode        = exofs_alloc_inode,
  .destroy_inode      = exofs_destroy_inode,
  .write_inode        = exofs_write_inode,
  .evict_inode        = exofs_evict_inode,
  .put_super          = exofs_put_super,
  .sync_fs            = exofs_sync_fs,
  .statfs             = exofs_statfs,
};
export_operations exofs_export_ops {
  .fh_to_dentry       = exofs_fh_to_dentry,
  .fh_to_parent       = exofs_fh_to_parent,
  .get_parent         = exofs_get_parent,
};
file_system_type exofs_type {
  .owner              = THIS_MODULE,
  .name               = "exofs",
  .mount              = exofs_mount,
  .kill_sb            = generic_shutdown_super,
};
sysfs_ops odev_attr_ops {
  .show               = odev_attr_show,
  .store              = odev_attr_store,
};
exofs/addr/addr {
  .readpage           = exofs_readpage,
  .readpages          = exofs_readpages,
  .writepages         = exofs_writepages,
  .write_begin        = exofs_write_begin_export,
  .write_end          = exofs_write_end,
  .releasepage        = exofs_releasepage,
  .set_page_dirty     = __set_page_dirty_nobuffers,
  .invalidatepage     = exofs_invalidatepage,
  .direct_IO          = exofs_direct_IO,
};
exofs/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = generic_file_read_iter,
  .write_iter         = generic_file_write_iter,
  .mmap               = generic_file_mmap,
  .open               = generic_file_open,
  .release            = exofs_release_file,
  .fsync              = exofs_file_fsync,
  .flush              = exofs_flush,
  .splice_read        = generic_file_splice_read,
  .splice_write       = iter_file_splice_write,
};
exofs/inode/file {
  .setattr            = exofs_setattr,
};
exofs/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
};
exofs_fast/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = exofs_follow_link,
};
xattr_handler ext2_xattr_security_handler {
  .prefix             = XATTR_SECURITY_PREFIX,
  .list               = ext2_xattr_security_list,
  .get                = ext2_xattr_security_get,
  .set                = ext2_xattr_security_set,
};
xattr_handler ext2_xattr_trusted_handler {
  .prefix             = XATTR_TRUSTED_PREFIX,
  .list               = ext2_xattr_trusted_list,
  .get                = ext2_xattr_trusted_get,
  .set                = ext2_xattr_trusted_set,
};
ext2/inode/dir {
  .create             = ext2_create,
  .lookup             = ext2_lookup,
  .link               = ext2_link,
  .unlink             = ext2_unlink,
  .symlink            = ext2_symlink,
  .mkdir              = ext2_mkdir,
  .rmdir              = ext2_rmdir,
  .mknod              = ext2_mknod,
  .rename             = ext2_rename,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext2_listxattr,
  .removexattr        = generic_removexattr,
  .setattr            = ext2_setattr,
  .get_acl            = ext2_get_acl,
  .set_acl            = ext2_set_acl,
  .tmpfile            = ext2_tmpfile,
};
ext2/inode/special {
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext2_listxattr,
  .removexattr        = generic_removexattr,
  .setattr            = ext2_setattr,
  .get_acl            = ext2_get_acl,
  .set_acl            = ext2_set_acl,
};
ext2/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = ext2_readdir,
  .unlocked_ioctl     = ext2_ioctl,
  .compat_ioctl       = ext2_compat_ioctl,
  .fsync              = ext2_fsync,
};
ext2/super/super {
  .alloc_inode        = ext2_alloc_inode,
  .destroy_inode      = ext2_destroy_inode,
  .write_inode        = ext2_write_inode,
  .evict_inode        = ext2_evict_inode,
  .put_super          = ext2_put_super,
  .sync_fs            = ext2_sync_fs,
  .freeze_fs          = ext2_freeze,
  .unfreeze_fs        = ext2_unfreeze,
  .statfs             = ext2_statfs,
  .remount_fs         = ext2_remount,
  .show_options       = ext2_show_options,
  .quota_read         = ext2_quota_read,
  .quota_write        = ext2_quota_write,
};
export_operations ext2_export_ops {
  .fh_to_dentry       = ext2_fh_to_dentry,
  .fh_to_parent       = ext2_fh_to_parent,
  .get_parent         = ext2_get_parent,
};
ext2/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "ext2",
  .mount              = ext2_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
ext2/addr/addr {
  .readpage           = ext2_readpage,
  .readpages          = ext2_readpages,
  .writepage          = ext2_writepage,
  .write_begin        = ext2_write_begin,
  .write_end          = ext2_write_end,
  .bmap               = ext2_bmap,
  .direct_IO          = ext2_direct_IO,
  .writepages         = ext2_writepages,
  .migratepage        = buffer_migrate_page,
  .is_partially_uptodate= block_is_partially_uptodate,
  .error_remove_page  = generic_error_remove_page,
};
ext2/addr/addr {
  .bmap               = ext2_bmap,
  .get_xip_mem        = ext2_get_xip_mem,
};
ext2_nobh/addr/addr {
  .readpage           = ext2_readpage,
  .readpages          = ext2_readpages,
  .writepage          = ext2_nobh_writepage,
  .write_begin        = ext2_nobh_write_begin,
  .write_end          = nobh_write_end,
  .bmap               = ext2_bmap,
  .direct_IO          = ext2_direct_IO,
  .writepages         = ext2_writepages,
  .migratepage        = buffer_migrate_page,
  .error_remove_page  = generic_error_remove_page,
};
ext2/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = generic_file_read_iter,
  .write_iter         = generic_file_write_iter,
  .unlocked_ioctl     = ext2_ioctl,
  .compat_ioctl       = ext2_compat_ioctl,
  .mmap               = generic_file_mmap,
  .open               = dquot_file_open,
  .release            = ext2_release_file,
  .fsync              = ext2_fsync,
  .splice_read        = generic_file_splice_read,
  .splice_write       = iter_file_splice_write,
};
ext2_xip/file/file {
  .llseek             = generic_file_llseek,
  .read               = xip_file_read,
  .write              = xip_file_write,
  .unlocked_ioctl     = ext2_ioctl,
  .compat_ioctl       = ext2_compat_ioctl,
  .mmap               = xip_file_mmap,
  .open               = dquot_file_open,
  .release            = ext2_release_file,
  .fsync              = ext2_fsync,
};
ext2/inode/file {
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext2_listxattr,
  .removexattr        = generic_removexattr,
  .setattr            = ext2_setattr,
  .get_acl            = ext2_get_acl,
  .set_acl            = ext2_set_acl,
  .fiemap             = ext2_fiemap,
};
ext2/xattr/user {
  .prefix             = XATTR_USER_PREFIX,
  .list               = ext2_xattr_user_list,
  .get                = ext2_xattr_user_get,
  .set                = ext2_xattr_user_set,
};
ext2/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .setattr            = ext2_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext2_listxattr,
  .removexattr        = generic_removexattr,
};
ext2_fast/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = ext2_follow_link,
  .setattr            = ext2_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext2_listxattr,
  .removexattr        = generic_removexattr,
};
xattr_handler *ext2_xattr_handler_map[] {
  [EXT2_XATTR_INDEX_USER]= &ext2_xattr_user_handler,
  [EXT2_XATTR_INDEX_POSIX_ACL_ACCESS]= &posix_acl_access_xattr_handler,
  [EXT2_XATTR_INDEX_POSIX_ACL_DEFAULT]= &posix_acl_default_xattr_handler,
  [EXT2_XATTR_INDEX_TRUSTED]= &ext2_xattr_trusted_handler,
  [EXT2_XATTR_INDEX_SECURITY]= &ext2_xattr_security_handler,
};
xattr_handler *ext2_xattr_handlers[] {
&ext2_xattr_user_handler,
&ext2_xattr_trusted_handler,
&posix_acl_access_xattr_handler,
&posix_acl_default_xattr_handler,
&ext2_xattr_security_handler,
NULL
};
xattr_handler ext3_xattr_security_handler {
  .prefix             = XATTR_SECURITY_PREFIX,
  .list               = ext3_xattr_security_list,
  .get                = ext3_xattr_security_get,
  .set                = ext3_xattr_security_set,
};
xattr_handler ext3_xattr_trusted_handler {
  .prefix             = XATTR_TRUSTED_PREFIX,
  .list               = ext3_xattr_trusted_list,
  .get                = ext3_xattr_trusted_get,
  .set                = ext3_xattr_trusted_set,
};
ext3/inode/dir {
  .create             = ext3_create,
  .lookup             = ext3_lookup,
  .link               = ext3_link,
  .unlink             = ext3_unlink,
  .symlink            = ext3_symlink,
  .mkdir              = ext3_mkdir,
  .rmdir              = ext3_rmdir,
  .mknod              = ext3_mknod,
  .tmpfile            = ext3_tmpfile,
  .rename             = ext3_rename,
  .setattr            = ext3_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext3_listxattr,
  .removexattr        = generic_removexattr,
  .get_acl            = ext3_get_acl,
  .set_acl            = ext3_set_acl,
};
ext3/inode/special {
  .setattr            = ext3_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext3_listxattr,
  .removexattr        = generic_removexattr,
  .get_acl            = ext3_get_acl,
  .set_acl            = ext3_set_acl,
};
ext3/inode/dir {
  .llseek             = ext3_dir_llseek,
  .read               = generic_read_dir,
  .iterate            = ext3_readdir,
  .unlocked_ioctl     = ext3_ioctl,
  .compat_ioctl       = ext3_compat_ioctl,
  .fsync              = ext3_sync_file,
  .release            = ext3_release_dir,
};
dquot_operations ext3_quota_operations {
  .write_dquot        = ext3_write_dquot,
  .acquire_dquot      = ext3_acquire_dquot,
  .release_dquot      = ext3_release_dquot,
  .mark_dirty         = ext3_mark_dquot_dirty,
  .write_info         = ext3_write_info,
  .alloc_dquot        = dquot_alloc,
  .destroy_dquot      = dquot_destroy,
};
quotactl_ops ext3_qctl_operations {
  .quota_on           = ext3_quota_on,
  .quota_off          = dquot_quota_off,
  .quota_sync         = dquot_quota_sync,
  .get_info           = dquot_get_dqinfo,
  .set_info           = dquot_set_dqinfo,
  .get_dqblk          = dquot_get_dqblk,
  .set_dqblk          = dquot_set_dqblk
};
ext3/super/super {
  .alloc_inode        = ext3_alloc_inode,
  .destroy_inode      = ext3_destroy_inode,
  .write_inode        = ext3_write_inode,
  .dirty_inode        = ext3_dirty_inode,
  .drop_inode         = ext3_drop_inode,
  .evict_inode        = ext3_evict_inode,
  .put_super          = ext3_put_super,
  .sync_fs            = ext3_sync_fs,
  .freeze_fs          = ext3_freeze,
  .unfreeze_fs        = ext3_unfreeze,
  .statfs             = ext3_statfs,
  .remount_fs         = ext3_remount,
  .show_options       = ext3_show_options,
  .quota_read         = ext3_quota_read,
  .quota_write        = ext3_quota_write,
  .bdev_try_to_free_page= bdev_try_to_free_page,
};
export_operations ext3_export_ops {
  .fh_to_dentry       = ext3_fh_to_dentry,
  .fh_to_parent       = ext3_fh_to_parent,
  .get_parent         = ext3_get_parent,
};
ext3/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "ext3",
  .mount              = ext3_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
ext3_ordered/addr/addr {
  .readpage           = ext3_readpage,
  .readpages          = ext3_readpages,
  .writepage          = ext3_ordered_writepage,
  .write_begin        = ext3_write_begin,
  .write_end          = ext3_ordered_write_end,
  .bmap               = ext3_bmap,
  .invalidatepage     = ext3_invalidatepage,
  .releasepage        = ext3_releasepage,
  .direct_IO          = ext3_direct_IO,
  .migratepage        = buffer_migrate_page,
  .is_partially_uptodate= block_is_partially_uptodate,
  .is_dirty_writeback = buffer_check_dirty_writeback,
  .error_remove_page  = generic_error_remove_page,
};
ext3_writeback/addr/addr {
  .readpage           = ext3_readpage,
  .readpages          = ext3_readpages,
  .writepage          = ext3_writeback_writepage,
  .write_begin        = ext3_write_begin,
  .write_end          = ext3_writeback_write_end,
  .bmap               = ext3_bmap,
  .invalidatepage     = ext3_invalidatepage,
  .releasepage        = ext3_releasepage,
  .direct_IO          = ext3_direct_IO,
  .migratepage        = buffer_migrate_page,
  .is_partially_uptodate= block_is_partially_uptodate,
  .error_remove_page  = generic_error_remove_page,
};
ext3_journalled/addr/addr {
  .readpage           = ext3_readpage,
  .readpages          = ext3_readpages,
  .writepage          = ext3_journalled_writepage,
  .write_begin        = ext3_write_begin,
  .write_end          = ext3_journalled_write_end,
  .set_page_dirty     = ext3_journalled_set_page_dirty,
  .bmap               = ext3_bmap,
  .invalidatepage     = ext3_invalidatepage,
  .releasepage        = ext3_releasepage,
  .is_partially_uptodate= block_is_partially_uptodate,
  .error_remove_page  = generic_error_remove_page,
};
ext3/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = generic_file_read_iter,
  .write_iter         = generic_file_write_iter,
  .unlocked_ioctl     = ext3_ioctl,
  .compat_ioctl       = ext3_compat_ioctl,
  .mmap               = generic_file_mmap,
  .open               = dquot_file_open,
  .release            = ext3_release_file,
  .fsync              = ext3_sync_file,
  .splice_read        = generic_file_splice_read,
  .splice_write       = iter_file_splice_write,
};
ext3/inode/file {
  .setattr            = ext3_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext3_listxattr,
  .removexattr        = generic_removexattr,
  .get_acl            = ext3_get_acl,
  .set_acl            = ext3_set_acl,
  .fiemap             = ext3_fiemap,
};
ext3/xattr/user {
  .prefix             = XATTR_USER_PREFIX,
  .list               = ext3_xattr_user_list,
  .get                = ext3_xattr_user_get,
  .set                = ext3_xattr_user_set,
};
ext3/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .setattr            = ext3_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext3_listxattr,
  .removexattr        = generic_removexattr,
};
ext3_fast/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = ext3_follow_link,
  .setattr            = ext3_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext3_listxattr,
  .removexattr        = generic_removexattr,
};
ext4/xattr/security {
  .prefix             = XATTR_SECURITY_PREFIX,
  .list               = ext4_xattr_security_list,
  .get                = ext4_xattr_security_get,
  .set                = ext4_xattr_security_set,
};
ext4/xattr/trusted {
  .prefix             = XATTR_TRUSTED_PREFIX,
  .list               = ext4_xattr_trusted_list,
  .get                = ext4_xattr_trusted_get,
  .set                = ext4_xattr_trusted_set,
};
ext4/inode/dir {
  .create             = ext4_create,
  .lookup             = ext4_lookup,
  .link               = ext4_link,
  .unlink             = ext4_unlink,
  .symlink            = ext4_symlink,
  .mkdir              = ext4_mkdir,
  .rmdir              = ext4_rmdir,
  .mknod              = ext4_mknod,
  .tmpfile            = ext4_tmpfile,
  .rename2            = ext4_rename2,
  .setattr            = ext4_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext4_listxattr,
  .removexattr        = generic_removexattr,
  .get_acl            = ext4_get_acl,
  .set_acl            = ext4_set_acl,
  .fiemap             = ext4_fiemap,
};
ext4/inode/special {
  .setattr            = ext4_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext4_listxattr,
  .removexattr        = generic_removexattr,
  .get_acl            = ext4_get_acl,
  .set_acl            = ext4_set_acl,
};
ext4/inode/dir {
  .llseek             = ext4_dir_llseek,
  .read               = generic_read_dir,
  .iterate            = ext4_readdir,
  .unlocked_ioctl     = ext4_ioctl,
  .compat_ioctl       = ext4_compat_ioctl,
  .fsync              = ext4_sync_file,
  .release            = ext4_release_dir,
};
ext2/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "ext2",
  .mount              = ext4_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
ext3/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "ext3",
  .mount              = ext4_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
dquot_operations ext4_quota_operations {
  .get_reserved_space = ext4_get_reserved_space,
  .write_dquot        = ext4_write_dquot,
  .acquire_dquot      = ext4_acquire_dquot,
  .release_dquot      = ext4_release_dquot,
  .mark_dirty         = ext4_mark_dquot_dirty,
  .write_info         = ext4_write_info,
  .alloc_dquot        = dquot_alloc,
  .destroy_dquot      = dquot_destroy,
};
quotactl_ops ext4_qctl_operations {
  .quota_on           = ext4_quota_on,
  .quota_off          = ext4_quota_off,
  .quota_sync         = dquot_quota_sync,
  .get_info           = dquot_get_dqinfo,
  .set_info           = dquot_set_dqinfo,
  .get_dqblk          = dquot_get_dqblk,
  .set_dqblk          = dquot_set_dqblk
};
quotactl_ops ext4_qctl_sysfile_operations {
  .quota_on_meta      = ext4_quota_on_sysfile,
  .quota_off          = ext4_quota_off_sysfile,
  .quota_sync         = dquot_quota_sync,
  .get_info           = dquot_get_dqinfo,
  .set_info           = dquot_set_dqinfo,
  .get_dqblk          = dquot_get_dqblk,
  .set_dqblk          = dquot_set_dqblk
};
ext4/super/super {
  .alloc_inode        = ext4_alloc_inode,
  .destroy_inode      = ext4_destroy_inode,
  .write_inode        = ext4_write_inode,
  .dirty_inode        = ext4_dirty_inode,
  .drop_inode         = ext4_drop_inode,
  .evict_inode        = ext4_evict_inode,
  .put_super          = ext4_put_super,
  .sync_fs            = ext4_sync_fs,
  .freeze_fs          = ext4_freeze,
  .unfreeze_fs        = ext4_unfreeze,
  .statfs             = ext4_statfs,
  .remount_fs         = ext4_remount,
  .show_options       = ext4_show_options,
  .quota_read         = ext4_quota_read,
  .quota_write        = ext4_quota_write,
  .bdev_try_to_free_page= bdev_try_to_free_page,
};
ext4_nojournal/super/super {
  .alloc_inode        = ext4_alloc_inode,
  .destroy_inode      = ext4_destroy_inode,
  .write_inode        = ext4_write_inode,
  .dirty_inode        = ext4_dirty_inode,
  .drop_inode         = ext4_drop_inode,
  .evict_inode        = ext4_evict_inode,
  .sync_fs            = ext4_sync_fs_nojournal,
  .put_super          = ext4_put_super,
  .statfs             = ext4_statfs,
  .remount_fs         = ext4_remount,
  .show_options       = ext4_show_options,
  .quota_read         = ext4_quota_read,
  .quota_write        = ext4_quota_write,
  .bdev_try_to_free_page= bdev_try_to_free_page,
};
export_operations ext4_export_ops {
  .fh_to_dentry       = ext4_fh_to_dentry,
  .fh_to_parent       = ext4_fh_to_parent,
  .get_parent         = ext4_get_parent,
};
file_operations ext4_seq_options_fops {
  .owner              = THIS_MODULE,
  .open               = options_open_fs,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
sysfs_ops ext4_attr_ops {
  .show               = ext4_attr_show,
  .store              = ext4_attr_store,
};
ext4/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "ext4",
  .mount              = ext4_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
ext4/addr/addr {
  .readpage           = ext4_readpage,
  .readpages          = ext4_readpages,
  .writepage          = ext4_writepage,
  .writepages         = ext4_writepages,
  .write_begin        = ext4_write_begin,
  .write_end          = ext4_write_end,
  .bmap               = ext4_bmap,
  .invalidatepage     = ext4_invalidatepage,
  .releasepage        = ext4_releasepage,
  .direct_IO          = ext4_direct_IO,
  .migratepage        = buffer_migrate_page,
  .is_partially_uptodate= block_is_partially_uptodate,
  .error_remove_page  = generic_error_remove_page,
};
ext4_journalled/addr/addr {
  .readpage           = ext4_readpage,
  .readpages          = ext4_readpages,
  .writepage          = ext4_writepage,
  .writepages         = ext4_writepages,
  .write_begin        = ext4_write_begin,
  .write_end          = ext4_journalled_write_end,
  .set_page_dirty     = ext4_journalled_set_page_dirty,
  .bmap               = ext4_bmap,
  .invalidatepage     = ext4_journalled_invalidatepage,
  .releasepage        = ext4_releasepage,
  .direct_IO          = ext4_direct_IO,
  .is_partially_uptodate= block_is_partially_uptodate,
  .error_remove_page  = generic_error_remove_page,
};
ext4_da/addr/addr {
  .readpage           = ext4_readpage,
  .readpages          = ext4_readpages,
  .writepage          = ext4_writepage,
  .writepages         = ext4_writepages,
  .write_begin        = ext4_da_write_begin,
  .write_end          = ext4_da_write_end,
  .bmap               = ext4_bmap,
  .invalidatepage     = ext4_da_invalidatepage,
  .releasepage        = ext4_releasepage,
  .direct_IO          = ext4_direct_IO,
  .migratepage        = buffer_migrate_page,
  .is_partially_uptodate= block_is_partially_uptodate,
  .error_remove_page  = generic_error_remove_page,
};
ext4/vm/file {
  .fault              = filemap_fault,
  .map_pages          = filemap_map_pages,
  .page_mkwrite       = ext4_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
ext4/file/file {
  .llseek             = ext4_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = generic_file_read_iter,
  .write_iter         = ext4_file_write_iter,
  .unlocked_ioctl     = ext4_ioctl,
  .compat_ioctl       = ext4_compat_ioctl,
  .mmap               = ext4_file_mmap,
  .open               = ext4_file_open,
  .release            = ext4_release_file,
  .fsync              = ext4_sync_file,
  .splice_read        = generic_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .fallocate          = ext4_fallocate,
};
ext4/inode/file {
  .setattr            = ext4_setattr,
  .getattr            = ext4_getattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext4_listxattr,
  .removexattr        = generic_removexattr,
  .get_acl            = ext4_get_acl,
  .set_acl            = ext4_set_acl,
  .fiemap             = ext4_fiemap,
};
seq_operations ext4_mb_seq_groups_ops {
  .start              = ext4_mb_seq_groups_start,
  .next               = ext4_mb_seq_groups_next,
  .stop               = ext4_mb_seq_groups_stop,
  .show               = ext4_mb_seq_groups_show,
};
file_operations ext4_mb_seq_groups_fops {
  .owner              = THIS_MODULE,
  .open               = ext4_mb_seq_groups_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
};
ext4/xattr/user {
  .prefix             = XATTR_USER_PREFIX,
  .list               = ext4_xattr_user_list,
  .get                = ext4_xattr_user_get,
  .set                = ext4_xattr_user_set,
};
ext4/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .setattr            = ext4_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext4_listxattr,
  .removexattr        = generic_removexattr,
};
ext4_fast/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = ext4_follow_link,
  .setattr            = ext4_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ext4_listxattr,
  .removexattr        = generic_removexattr,
};
f2fs/inode/dir {
  .create             = f2fs_create,
  .lookup             = f2fs_lookup,
  .link               = f2fs_link,
  .unlink             = f2fs_unlink,
  .symlink            = f2fs_symlink,
  .mkdir              = f2fs_mkdir,
  .rmdir              = f2fs_rmdir,
  .mknod              = f2fs_mknod,
  .rename             = f2fs_rename,
  .rename2            = f2fs_rename2,
  .tmpfile            = f2fs_tmpfile,
  .getattr            = f2fs_getattr,
  .setattr            = f2fs_setattr,
  .get_acl            = f2fs_get_acl,
  .set_acl            = f2fs_set_acl,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = f2fs_listxattr,
  .removexattr        = generic_removexattr,
};
f2fs/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .getattr            = f2fs_getattr,
  .setattr            = f2fs_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = f2fs_listxattr,
  .removexattr        = generic_removexattr,
};
f2fs/inode/special {
  .getattr            = f2fs_getattr,
  .setattr            = f2fs_setattr,
  .get_acl            = f2fs_get_acl,
  .set_acl            = f2fs_set_acl,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = f2fs_listxattr,
  .removexattr        = generic_removexattr,
};
f2fs/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = f2fs_readdir,
  .fsync              = f2fs_sync_file,
  .unlocked_ioctl     = f2fs_ioctl,
};
f2fs_node/addr/addr {
  .writepage          = f2fs_write_node_page,
  .writepages         = f2fs_write_node_pages,
  .set_page_dirty     = f2fs_set_node_page_dirty,
  .invalidatepage     = f2fs_invalidate_node_page,
  .releasepage        = f2fs_release_node_page,
};
f2fs_dblock/addr/addr {
  .readpage           = f2fs_read_data_page,
  .readpages          = f2fs_read_data_pages,
  .writepage          = f2fs_write_data_page,
  .writepages         = f2fs_write_data_pages,
  .write_begin        = f2fs_write_begin,
  .write_end          = f2fs_write_end,
  .set_page_dirty     = f2fs_set_data_page_dirty,
  .invalidatepage     = f2fs_invalidate_data_page,
  .releasepage        = f2fs_release_data_page,
  .direct_IO          = f2fs_direct_IO,
  .bmap               = f2fs_bmap,
};
sysfs_ops f2fs_attr_ops {
  .show               = f2fs_attr_show,
  .store              = f2fs_attr_store,
};
file_operations f2fs_seq_segment_info_fops {
  .owner              = THIS_MODULE,
  .open               = segment_info_open_fs,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
f2fs/super/super {
  .alloc_inode        = f2fs_alloc_inode,
  .drop_inode         = f2fs_drop_inode,
  .destroy_inode      = f2fs_destroy_inode,
  .write_inode        = f2fs_write_inode,
  .dirty_inode        = f2fs_dirty_inode,
  .show_options       = f2fs_show_options,
  .evict_inode        = f2fs_evict_inode,
  .put_super          = f2fs_put_super,
  .sync_fs            = f2fs_sync_fs,
  .freeze_fs          = f2fs_freeze,
  .unfreeze_fs        = f2fs_unfreeze,
  .statfs             = f2fs_statfs,
  .remount_fs         = f2fs_remount,
};
export_operations f2fs_export_ops {
  .fh_to_dentry       = f2fs_fh_to_dentry,
  .fh_to_parent       = f2fs_fh_to_parent,
  .get_parent         = f2fs_get_parent,
};
f2fs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "f2fs",
  .mount              = f2fs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
file_operations stat_fops {
  .open               = stat_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
f2fs/vm/file {
  .fault              = filemap_fault,
  .map_pages          = filemap_map_pages,
  .page_mkwrite       = f2fs_vm_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
f2fs/inode/file {
  .getattr            = f2fs_getattr,
  .setattr            = f2fs_setattr,
  .get_acl            = f2fs_get_acl,
  .set_acl            = f2fs_set_acl,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = f2fs_listxattr,
  .removexattr        = generic_removexattr,
  .fiemap             = f2fs_fiemap,
};
f2fs/file/file {
  .llseek             = f2fs_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = generic_file_read_iter,
  .write_iter         = generic_file_write_iter,
  .open               = generic_file_open,
  .mmap               = f2fs_file_mmap,
  .fsync              = f2fs_sync_file,
  .fallocate          = f2fs_fallocate,
  .unlocked_ioctl     = f2fs_ioctl,
  .compat_ioctl       = f2fs_compat_ioctl,
  .splice_read        = generic_file_splice_read,
  .splice_write       = iter_file_splice_write,
};
f2fs_meta/addr/addr {
  .writepage          = f2fs_write_meta_page,
  .writepages         = f2fs_write_meta_pages,
  .set_page_dirty     = f2fs_set_meta_page_dirty,
};
f2fs/xattr/user {
  .prefix             = XATTR_USER_PREFIX,
  .flags              = F2FS_XATTR_INDEX_USER,
  .list               = f2fs_xattr_generic_list,
  .get                = f2fs_xattr_generic_get,
  .set                = f2fs_xattr_generic_set,
};
f2fs/xattr/trusted {
  .prefix             = XATTR_TRUSTED_PREFIX,
  .flags              = F2FS_XATTR_INDEX_TRUSTED,
  .list               = f2fs_xattr_generic_list,
  .get                = f2fs_xattr_generic_get,
  .set                = f2fs_xattr_generic_set,
};
f2fs/xattr/advise {
  .prefix             = F2FS_SYSTEM_ADVISE_PREFIX,
  .flags              = F2FS_XATTR_INDEX_ADVISE,
  .list               = f2fs_xattr_advise_list,
  .get                = f2fs_xattr_advise_get,
  .set                = f2fs_xattr_advise_set,
};
f2fs/xattr/security {
  .prefix             = XATTR_SECURITY_PREFIX,
  .flags              = F2FS_XATTR_INDEX_SECURITY,
  .list               = f2fs_xattr_generic_list,
  .get                = f2fs_xattr_generic_get,
  .set                = f2fs_xattr_generic_set,
};
msdos/dentry/dentry {
  .d_hash             = msdos_hash,
  .d_compare          = msdos_cmp,
};
msdos/inode/dir {
  .create             = msdos_create,
  .lookup             = msdos_lookup,
  .unlink             = msdos_unlink,
  .mkdir              = msdos_mkdir,
  .rmdir              = msdos_rmdir,
  .rename             = msdos_rename,
  .setattr            = fat_setattr,
  .getattr            = fat_getattr,
};
msdos/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "msdos",
  .mount              = msdos_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
fat/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = fat_readdir,
  .unlocked_ioctl     = fat_dir_ioctl,
  .compat_ioctl       = fat_compat_dir_ioctl,
  .fsync              = fat_file_fsync,
};
export_operations fat_export_ops {
  .fh_to_dentry       = fat_fh_to_dentry,
  .fh_to_parent       = fat_fh_to_parent,
  .get_parent         = fat_get_parent,
};
export_operations fat_export_ops_nostale {
  .encode_fh          = fat_encode_fh_nostale,
  .fh_to_dentry       = fat_fh_to_dentry_nostale,
  .fh_to_parent       = fat_fh_to_parent_nostale,
  .get_parent         = fat_get_parent,
};
fat/addr/addr {
  .readpage           = fat_readpage,
  .readpages          = fat_readpages,
  .writepage          = fat_writepage,
  .writepages         = fat_writepages,
  .write_begin        = fat_write_begin,
  .write_end          = fat_write_end,
  .direct_IO          = fat_direct_IO,
  .bmap               = _fat_bmap
};
fat/super/super {
  .alloc_inode        = fat_alloc_inode,
  .destroy_inode      = fat_destroy_inode,
  .write_inode        = fat_write_inode,
  .evict_inode        = fat_evict_inode,
  .put_super          = fat_put_super,
  .statfs             = fat_statfs,
  .remount_fs         = fat_remount,

  .show_options       = fat_show_options,
};
fat/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = generic_file_read_iter,
  .write_iter         = generic_file_write_iter,
  .mmap               = generic_file_mmap,
  .release            = fat_file_release,
  .unlocked_ioctl     = fat_generic_ioctl,
  .compat_ioctl       = fat_generic_compat_ioctl,
  .fsync              = fat_file_fsync,
  .splice_read        = generic_file_splice_read,
};
fat/inode/file {
  .setattr            = fat_setattr,
  .getattr            = fat_getattr,
};
dentry_operations vfat_ci_dentry_ops {
  .d_revalidate       = vfat_revalidate_ci,
  .d_hash             = vfat_hashi,
  .d_compare          = vfat_cmpi,
};
dentry_operations vfat_dentry_ops {
  .d_revalidate       = vfat_revalidate,
  .d_hash             = vfat_hash,
  .d_compare          = vfat_cmp,
};
vfat/inode/dir {
  .create             = vfat_create,
  .lookup             = vfat_lookup,
  .unlink             = vfat_unlink,
  .mkdir              = vfat_mkdir,
  .rmdir              = vfat_rmdir,
  .rename             = vfat_rename,
  .setattr            = fat_setattr,
  .getattr            = fat_getattr,
};
vfat/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "vfat",
  .mount              = vfat_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
inode_operations vxfs_immed_symlink_iops {
  .readlink           = generic_readlink,
  .follow_link        = vxfs_immed_follow_link,
};
vxfs_immed/addr/addr {
  .readpage           = vxfs_immed_readpage,
};
vxfs/super/super {
  .evict_inode        = vxfs_evict_inode,
  .put_super          = vxfs_put_super,
  .statfs             = vxfs_statfs,
  .remount_fs         = vxfs_remount,
};
vxfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "vxfs",
  .mount              = vxfs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
inode_operations vxfs_dir_inode_ops {
  .lookup             = vxfs_lookup,
};
vxfs/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = vxfs_readdir,
};
vxfs/addr/addr {
  .readpage           = vxfs_readpage,
  .bmap               = vxfs_bmap,
};
seq_operations fscache_objlist_ops {
  .start              = fscache_objlist_start,
  .stop               = fscache_objlist_stop,
  .next               = fscache_objlist_next,
  .show               = fscache_objlist_show,
};
file_operations fscache_objlist_fops {
  .owner              = THIS_MODULE,
  .open               = fscache_objlist_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = fscache_objlist_release,
};
seq_operations fscache_histogram_ops {
  .start              = fscache_histogram_start,
  .stop               = fscache_histogram_stop,
  .next               = fscache_histogram_next,
  .show               = fscache_histogram_show,
};
file_operations fscache_histogram_fops {
  .owner              = THIS_MODULE,
  .open               = fscache_histogram_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
};
file_operations fscache_stats_fops {
  .owner              = THIS_MODULE,
  .open               = fscache_stats_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
fuse/dentry/dentry {
  .d_revalidate       = fuse_dentry_revalidate,
};
fuse/inode/dir {
  .lookup             = fuse_lookup,
  .mkdir              = fuse_mkdir,
  .symlink            = fuse_symlink,
  .unlink             = fuse_unlink,
  .rmdir              = fuse_rmdir,
  .rename2            = fuse_rename2,
  .link               = fuse_link,
  .setattr            = fuse_setattr,
  .create             = fuse_create,
  .atomic_open        = fuse_atomic_open,
  .mknod              = fuse_mknod,
  .permission         = fuse_permission,
  .getattr            = fuse_getattr,
  .setxattr           = fuse_setxattr,
  .getxattr           = fuse_getxattr,
  .listxattr          = fuse_listxattr,
  .removexattr        = fuse_removexattr,
};
fuse/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = fuse_readdir,
  .open               = fuse_dir_open,
  .release            = fuse_dir_release,
  .fsync              = fuse_dir_fsync,
  .unlocked_ioctl     = fuse_dir_ioctl,
  .compat_ioctl       = fuse_dir_compat_ioctl,
};
inode_operations fuse_common_inode_operations {
  .setattr            = fuse_setattr,
  .permission         = fuse_permission,
  .getattr            = fuse_getattr,
  .setxattr           = fuse_setxattr,
  .getxattr           = fuse_getxattr,
  .listxattr          = fuse_listxattr,
  .removexattr        = fuse_removexattr,
};
fuse/inode/symlink {
  .setattr            = fuse_setattr,
  .follow_link        = fuse_follow_link,
  .put_link           = fuse_put_link,
  .readlink           = generic_readlink,
  .getattr            = fuse_getattr,
  .setxattr           = fuse_setxattr,
  .getxattr           = fuse_getxattr,
  .listxattr          = fuse_listxattr,
  .removexattr        = fuse_removexattr,
};
file_operations cuse_frontend_fops {
  .owner              = THIS_MODULE,
  .read               = cuse_read,
  .write              = cuse_write,
  .open               = cuse_open,
  .release            = cuse_release,
  .unlocked_ioctl     = cuse_file_ioctl,
  .compat_ioctl       = cuse_file_compat_ioctl,
  .poll               = fuse_file_poll,
  .llseek             = noop_llseek,
};
file_operations fuse_ctl_abort_ops {
  .open               = nonseekable_open,
  .write              = fuse_conn_abort_write,
  .llseek             = no_llseek,
};
file_operations fuse_ctl_waiting_ops {
  .open               = nonseekable_open,
  .read               = fuse_conn_waiting_read,
  .llseek             = no_llseek,
};
file_operations fuse_conn_max_background_ops {
  .open               = nonseekable_open,
  .read               = fuse_conn_max_background_read,
  .write              = fuse_conn_max_background_write,
  .llseek             = no_llseek,
};
file_operations fuse_conn_congestion_threshold_ops {
  .open               = nonseekable_open,
  .read               = fuse_conn_congestion_threshold_read,
  .write              = fuse_conn_congestion_threshold_write,
  .llseek             = no_llseek,
};
fuse_ctl/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "fusectl",
  .mount              = fuse_ctl_mount,
  .kill_sb            = fuse_ctl_kill_sb,
};
fuse/export/export {
  .fh_to_dentry       = fuse_fh_to_dentry,
  .fh_to_parent       = fuse_fh_to_parent,
  .encode_fh          = fuse_encode_fh,
  .get_parent         = fuse_get_parent,
};
fuse/super/super {
  .alloc_inode        = fuse_alloc_inode,
  .destroy_inode      = fuse_destroy_inode,
  .evict_inode        = fuse_evict_inode,
  .write_inode        = fuse_write_inode,
  .drop_inode         = generic_delete_inode,
  .remount_fs         = fuse_remount_fs,
  .put_super          = fuse_put_super,
  .umount_begin       = fuse_umount_begin,
  .statfs             = fuse_statfs,
  .show_options       = fuse_show_options,
};
fuse/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "fuse",
  .fs_flags           = FS_HAS_SUBTYPE,
  .mount              = fuse_mount,
  .kill_sb            = fuse_kill_sb_anon,
};
fuseblk/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "fuseblk",
  .mount              = fuse_mount_blk,
  .kill_sb            = fuse_kill_sb_blk,
  .fs_flags           = FS_REQUIRES_DEV | FS_HAS_SUBTYPE,
};
fuse/vm/file {
  .close              = fuse_vma_close,
  .fault              = filemap_fault,
  .map_pages          = filemap_map_pages,
  .page_mkwrite       = fuse_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
fuse/file/file {
  .llseek             = fuse_file_llseek,
  .read               = new_sync_read,
  .read_iter          = fuse_file_read_iter,
  .write              = new_sync_write,
  .write_iter         = fuse_file_write_iter,
  .mmap               = fuse_file_mmap,
  .open               = fuse_open,
  .flush              = fuse_flush,
  .release            = fuse_release,
  .fsync              = fuse_fsync,
  .lock               = fuse_file_lock,
  .flock              = fuse_file_flock,
  .splice_read        = generic_file_splice_read,
  .unlocked_ioctl     = fuse_file_ioctl,
  .compat_ioctl       = fuse_file_compat_ioctl,
  .poll               = fuse_file_poll,
  .fallocate          = fuse_file_fallocate,
};
fuse_direct_io/file/file {
  .llseek             = fuse_file_llseek,
  .read               = fuse_direct_read,
  .write              = fuse_direct_write,
  .mmap               = fuse_direct_mmap,
  .open               = fuse_open,
  .flush              = fuse_flush,
  .release            = fuse_release,
  .fsync              = fuse_fsync,
  .lock               = fuse_file_lock,
  .flock              = fuse_file_flock,
  .unlocked_ioctl     = fuse_file_ioctl,
  .compat_ioctl       = fuse_file_compat_ioctl,
  .poll               = fuse_file_poll,
  .fallocate          = fuse_file_fallocate,
};
fuse_file/addr/addr {
  .readpage           = fuse_readpage,
  .writepage          = fuse_writepage,
  .writepages         = fuse_writepages,
  .launder_page       = fuse_launder_page,
  .readpages          = fuse_readpages,
  .set_page_dirty     = __set_page_dirty_nobuffers,
  .bmap               = fuse_bmap,
  .direct_IO          = fuse_direct_IO,
  .write_begin        = fuse_write_begin,
  .write_end          = fuse_write_end,
};
file_operations fuse_dev_operations {
  .owner              = THIS_MODULE,
  .llseek             = no_llseek,
  .read               = do_sync_read,
  .aio_read           = fuse_dev_read,
  .splice_read        = fuse_dev_splice_read,
  .write              = do_sync_write,
  .aio_write          = fuse_dev_write,
  .splice_write       = fuse_dev_splice_write,
  .poll               = fuse_dev_poll,
  .release            = fuse_dev_release,
  .fasync             = fuse_dev_fasync,
};
dentry_operations gfs2_dops {
  .d_revalidate       = gfs2_drevalidate,
  .d_hash             = gfs2_dhash,
  .d_delete           = gfs2_dentry_delete,
};
export_operations gfs2_export_ops {
  .encode_fh          = gfs2_encode_fh,
  .fh_to_dentry       = gfs2_fh_to_dentry,
  .fh_to_parent       = gfs2_fh_to_parent,
  .get_name           = gfs2_get_name,
  .get_parent         = gfs2_get_parent,
};
gfs2/super/super {
  .alloc_inode        = gfs2_alloc_inode,
  .destroy_inode      = gfs2_destroy_inode,
  .write_inode        = gfs2_write_inode,
  .dirty_inode        = gfs2_dirty_inode,
  .evict_inode        = gfs2_evict_inode,
  .put_super          = gfs2_put_super,
  .sync_fs            = gfs2_sync_fs,
  .freeze_fs          = gfs2_freeze,
  .unfreeze_fs        = gfs2_unfreeze,
  .statfs             = gfs2_statfs,
  .remount_fs         = gfs2_remount_fs,
  .drop_inode         = gfs2_drop_inode,
  .show_options       = gfs2_show_options,
};
sysfs_ops gfs2_attr_ops {
  .show               = gfs2_attr_show,
  .store              = gfs2_attr_store,
};
gfs2_meta/addr/addr {
  .writepage          = gfs2_aspace_writepage,
  .releasepage        = gfs2_releasepage,
};
gfs2_rgrp/addr/addr {
  .writepage          = gfs2_aspace_writepage,
  .releasepage        = gfs2_releasepage,
};
inode_operations gfs2_file_iops {
  .permission         = gfs2_permission,
  .setattr            = gfs2_setattr,
  .getattr            = gfs2_getattr,
  .setxattr           = gfs2_setxattr,
  .getxattr           = gfs2_getxattr,
  .listxattr          = gfs2_listxattr,
  .removexattr        = gfs2_removexattr,
  .fiemap             = gfs2_fiemap,
  .get_acl            = gfs2_get_acl,
  .set_acl            = gfs2_set_acl,
};
inode_operations gfs2_dir_iops {
  .create             = gfs2_create,
  .lookup             = gfs2_lookup,
  .link               = gfs2_link,
  .unlink             = gfs2_unlink,
  .symlink            = gfs2_symlink,
  .mkdir              = gfs2_mkdir,
  .rmdir              = gfs2_unlink,
  .mknod              = gfs2_mknod,
  .rename             = gfs2_rename,
  .permission         = gfs2_permission,
  .setattr            = gfs2_setattr,
  .getattr            = gfs2_getattr,
  .setxattr           = gfs2_setxattr,
  .getxattr           = gfs2_getxattr,
  .listxattr          = gfs2_listxattr,
  .removexattr        = gfs2_removexattr,
  .fiemap             = gfs2_fiemap,
  .get_acl            = gfs2_get_acl,
  .set_acl            = gfs2_set_acl,
  .atomic_open        = gfs2_atomic_open,
};
inode_operations gfs2_symlink_iops {
  .readlink           = generic_readlink,
  .follow_link        = gfs2_follow_link,
  .put_link           = kfree_put_link,
  .permission         = gfs2_permission,
  .setattr            = gfs2_setattr,
  .getattr            = gfs2_getattr,
  .setxattr           = gfs2_setxattr,
  .getxattr           = gfs2_getxattr,
  .listxattr          = gfs2_listxattr,
  .removexattr        = gfs2_removexattr,
  .fiemap             = gfs2_fiemap,
};
vm_operations_struct gfs2_vm_ops {
  .fault              = filemap_fault,
  .map_pages          = filemap_map_pages,
  .page_mkwrite       = gfs2_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
file_operations gfs2_file_fops {
  .llseek             = gfs2_llseek,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .write              = new_sync_write,
  .write_iter         = gfs2_file_write_iter,
  .unlocked_ioctl     = gfs2_ioctl,
  .mmap               = gfs2_mmap,
  .open               = gfs2_open,
  .release            = gfs2_release,
  .fsync              = gfs2_fsync,
  .lock               = gfs2_lock,
  .flock              = gfs2_flock,
  .splice_read        = generic_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .setlease           = gfs2_setlease,
  .fallocate          = gfs2_fallocate,
};
file_operations gfs2_dir_fops {
  .iterate            = gfs2_readdir,
  .unlocked_ioctl     = gfs2_ioctl,
  .open               = gfs2_open,
  .release            = gfs2_release,
  .fsync              = gfs2_fsync,
  .lock               = gfs2_lock,
  .flock              = gfs2_flock,
  .llseek             = default_llseek,
};
file_operations gfs2_file_fops_nolock {
  .llseek             = gfs2_llseek,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .write              = new_sync_write,
  .write_iter         = gfs2_file_write_iter,
  .unlocked_ioctl     = gfs2_ioctl,
  .mmap               = gfs2_mmap,
  .open               = gfs2_open,
  .release            = gfs2_release,
  .fsync              = gfs2_fsync,
  .splice_read        = generic_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .setlease           = generic_setlease,
  .fallocate          = gfs2_fallocate,
};
file_operations gfs2_dir_fops_nolock {
  .iterate            = gfs2_readdir,
  .unlocked_ioctl     = gfs2_ioctl,
  .open               = gfs2_open,
  .release            = gfs2_release,
  .fsync              = gfs2_fsync,
  .llseek             = default_llseek,
};
seq_operations gfs2_glock_seq_ops {
  .start              = gfs2_glock_seq_start,
  .next               = gfs2_glock_seq_next,
  .stop               = gfs2_glock_seq_stop,
  .show               = gfs2_glock_seq_show,
};
seq_operations gfs2_glstats_seq_ops {
  .start              = gfs2_glock_seq_start,
  .next               = gfs2_glock_seq_next,
  .stop               = gfs2_glock_seq_stop,
  .show               = gfs2_glstats_seq_show,
};
seq_operations gfs2_sbstats_seq_ops {
  .start              = gfs2_sbstats_seq_start,
  .next               = gfs2_sbstats_seq_next,
  .stop               = gfs2_sbstats_seq_stop,
  .show               = gfs2_sbstats_seq_show,
};
file_operations gfs2_glocks_fops {
  .owner              = THIS_MODULE,
  .open               = gfs2_glocks_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_private,
};
file_operations gfs2_glstats_fops {
  .owner              = THIS_MODULE,
  .open               = gfs2_glstats_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_private,
};
file_operations gfs2_sbstats_fops {
  .owner              = THIS_MODULE,
  .open               = gfs2_sbstats_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_private,
};
quotactl_ops gfs2_quotactl_ops {
  .quota_sync         = gfs2_quota_sync,
  .get_xstate         = gfs2_quota_get_xstate,
  .get_dqblk          = gfs2_get_dqblk,
  .set_dqblk          = gfs2_set_dqblk,
};
gfs2_writeback/addr/addr {
  .writepage          = gfs2_writepage,
  .writepages         = gfs2_writepages,
  .readpage           = gfs2_readpage,
  .readpages          = gfs2_readpages,
  .write_begin        = gfs2_write_begin,
  .write_end          = gfs2_write_end,
  .bmap               = gfs2_bmap,
  .invalidatepage     = gfs2_invalidatepage,
  .releasepage        = gfs2_releasepage,
  .direct_IO          = gfs2_direct_IO,
  .migratepage        = buffer_migrate_page,
  .is_partially_uptodate= block_is_partially_uptodate,
  .error_remove_page  = generic_error_remove_page,
};
gfs2_ordered/addr/addr {
  .writepage          = gfs2_writepage,
  .writepages         = gfs2_writepages,
  .readpage           = gfs2_readpage,
  .readpages          = gfs2_readpages,
  .write_begin        = gfs2_write_begin,
  .write_end          = gfs2_write_end,
  .set_page_dirty     = gfs2_set_page_dirty,
  .bmap               = gfs2_bmap,
  .invalidatepage     = gfs2_invalidatepage,
  .releasepage        = gfs2_releasepage,
  .direct_IO          = gfs2_direct_IO,
  .migratepage        = buffer_migrate_page,
  .is_partially_uptodate= block_is_partially_uptodate,
  .error_remove_page  = generic_error_remove_page,
};
gfs2_jdata/addr/addr {
  .writepage          = gfs2_jdata_writepage,
  .writepages         = gfs2_jdata_writepages,
  .readpage           = gfs2_readpage,
  .readpages          = gfs2_readpages,
  .write_begin        = gfs2_write_begin,
  .write_end          = gfs2_write_end,
  .set_page_dirty     = gfs2_set_page_dirty,
  .bmap               = gfs2_bmap,
  .invalidatepage     = gfs2_invalidatepage,
  .releasepage        = gfs2_releasepage,
  .is_partially_uptodate= block_is_partially_uptodate,
  .error_remove_page  = generic_error_remove_page,
};
gfs2/fs/fs {
  .name               = "gfs2",
  .fs_flags           = FS_REQUIRES_DEV,
  .mount              = gfs2_mount,
  .kill_sb            = gfs2_kill_sb,
  .owner              = THIS_MODULE,
};
gfs2meta/fs/fs {
  .name               = "gfs2meta",
  .fs_flags           = FS_REQUIRES_DEV,
  .mount              = gfs2_mount_meta,
  .owner              = THIS_MODULE,
};
gfs2/xattr/user {
  .prefix             = XATTR_USER_PREFIX,
  .flags              = GFS2_EATYPE_USR,
  .get                = gfs2_xattr_get,
  .set                = gfs2_xattr_set,
};
gfs2/xattr/security {
  .prefix             = XATTR_SECURITY_PREFIX,
  .flags              = GFS2_EATYPE_SECURITY,
  .get                = gfs2_xattr_get,
  .set                = gfs2_xattr_set,
};
hfs/inode/dir {
  .read               = generic_read_dir,
  .iterate            = hfs_readdir,
  .llseek             = generic_file_llseek,
  .release            = hfs_dir_release,
};
hfs/inode/dir {
  .create             = hfs_create,
  .lookup             = hfs_lookup,
  .unlink             = hfs_remove,
  .mkdir              = hfs_mkdir,
  .rmdir              = hfs_remove,
  .rename             = hfs_rename,
  .setattr            = hfs_inode_setattr,
};
hfs/super/super {
  .alloc_inode        = hfs_alloc_inode,
  .destroy_inode      = hfs_destroy_inode,
  .write_inode        = hfs_write_inode,
  .evict_inode        = hfs_evict_inode,
  .put_super          = hfs_put_super,
  .sync_fs            = hfs_sync_fs,
  .statfs             = hfs_statfs,
  .remount_fs         = hfs_remount,
  .show_options       = hfs_show_options,
};
hfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "hfs",
  .mount              = hfs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
hfs_btree/addr/addr {
  .readpage           = hfs_readpage,
  .writepage          = hfs_writepage,
  .write_begin        = hfs_write_begin,
  .write_end          = generic_write_end,
  .bmap               = hfs_bmap,
  .releasepage        = hfs_releasepage,
};
hfs/addr/addr {
  .readpage           = hfs_readpage,
  .writepage          = hfs_writepage,
  .write_begin        = hfs_write_begin,
  .write_end          = generic_write_end,
  .bmap               = hfs_bmap,
  .direct_IO          = hfs_direct_IO,
  .writepages         = hfs_writepages,
};
hfs/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .write              = new_sync_write,
  .write_iter         = generic_file_write_iter,
  .mmap               = generic_file_mmap,
  .splice_read        = generic_file_splice_read,
  .fsync              = hfs_file_fsync,
  .open               = hfs_file_open,
  .release            = hfs_file_release,
};
hfs/inode/file {
  .lookup             = hfs_file_lookup,
  .setattr            = hfs_inode_setattr,
  .setxattr           = hfs_setxattr,
  .getxattr           = hfs_getxattr,
  .listxattr          = hfs_listxattr,
};
hfsplus/xattr/security {
  .prefix             = XATTR_SECURITY_PREFIX,
  .list               = hfsplus_security_listxattr,
  .get                = hfsplus_security_getxattr,
  .set                = hfsplus_security_setxattr,
};
hfsplus/xattr/trusted {
  .prefix             = XATTR_TRUSTED_PREFIX,
  .list               = hfsplus_trusted_listxattr,
  .get                = hfsplus_trusted_getxattr,
  .set                = hfsplus_trusted_setxattr,
};
hfsplus/inode/dir {
  .lookup             = hfsplus_lookup,
  .create             = hfsplus_create,
  .link               = hfsplus_link,
  .unlink             = hfsplus_unlink,
  .mkdir              = hfsplus_mkdir,
  .rmdir              = hfsplus_rmdir,
  .symlink            = hfsplus_symlink,
  .mknod              = hfsplus_mknod,
  .rename             = hfsplus_rename,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = hfsplus_listxattr,
  .removexattr        = generic_removexattr,
  .get_acl            = hfsplus_get_posix_acl,
  .set_acl            = hfsplus_set_posix_acl,
};
hfsplus/inode/dir {
  .fsync              = hfsplus_file_fsync,
  .read               = generic_read_dir,
  .iterate            = hfsplus_readdir,
  .unlocked_ioctl     = hfsplus_ioctl,
  .llseek             = generic_file_llseek,
  .release            = hfsplus_dir_release,
};
hfsplus/super/super {
  .alloc_inode        = hfsplus_alloc_inode,
  .destroy_inode      = hfsplus_destroy_inode,
  .write_inode        = hfsplus_write_inode,
  .evict_inode        = hfsplus_evict_inode,
  .put_super          = hfsplus_put_super,
  .sync_fs            = hfsplus_sync_fs,
  .statfs             = hfsplus_statfs,
  .remount_fs         = hfsplus_remount,
  .show_options       = hfsplus_show_options,
};
hfsplus/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "hfsplus",
  .mount              = hfsplus_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
hfsplus_btree/addr/addr {
  .readpage           = hfsplus_readpage,
  .writepage          = hfsplus_writepage,
  .write_begin        = hfsplus_write_begin,
  .write_end          = generic_write_end,
  .bmap               = hfsplus_bmap,
  .releasepage        = hfsplus_releasepage,
};
hfsplus/addr/addr {
  .readpage           = hfsplus_readpage,
  .writepage          = hfsplus_writepage,
  .write_begin        = hfsplus_write_begin,
  .write_end          = generic_write_end,
  .bmap               = hfsplus_bmap,
  .direct_IO          = hfsplus_direct_IO,
  .writepages         = hfsplus_writepages,
};
hfsplus/dentry/dentry {
  .d_hash             = hfsplus_hash_dentry,
  .d_compare          = hfsplus_compare_dentry,
};
hfsplus/inode/file {
  .setattr            = hfsplus_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = hfsplus_listxattr,
  .removexattr        = generic_removexattr,
  .get_acl            = hfsplus_get_posix_acl,
  .set_acl            = hfsplus_set_posix_acl,
};
hfsplus/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .write              = new_sync_write,
  .write_iter         = generic_file_write_iter,
  .mmap               = generic_file_mmap,
  .splice_read        = generic_file_splice_read,
  .fsync              = hfsplus_file_fsync,
  .open               = hfsplus_file_open,
  .release            = hfsplus_file_release,
  .unlocked_ioctl     = hfsplus_ioctl,
};
hfsplus/xattr/user {
  .prefix             = XATTR_USER_PREFIX,
  .list               = hfsplus_user_listxattr,
  .get                = hfsplus_user_getxattr,
  .set                = hfsplus_user_setxattr,
};
hfsplus/xattr/osx {
  .prefix             = XATTR_MAC_OSX_PREFIX,
  .list               = hfsplus_osx_listxattr,
  .get                = hfsplus_osx_getxattr,
  .set                = hfsplus_osx_setxattr,
};
hostfs/super/super {
  .alloc_inode        = hostfs_alloc_inode,
  .destroy_inode      = hostfs_destroy_inode,
  .evict_inode        = hostfs_evict_inode,
  .statfs             = hostfs_statfs,
  .show_options       = hostfs_show_options,
};
hostfs/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .splice_read        = generic_file_splice_read,
  .read_iter          = generic_file_read_iter,
  .write_iter         = generic_file_write_iter,
  .write              = new_sync_write,
  .mmap               = generic_file_mmap,
  .open               = hostfs_file_open,
  .release            = hostfs_file_release,
  .fsync              = hostfs_fsync,
};
hostfs/file/dir {
  .llseek             = generic_file_llseek,
  .iterate            = hostfs_readdir,
  .read               = generic_read_dir,
};
hostfs/addr/addr {
  .writepage          = hostfs_writepage,
  .readpage           = hostfs_readpage,
  .set_page_dirty     = __set_page_dirty_nobuffers,
  .write_begin        = hostfs_write_begin,
  .write_end          = hostfs_write_end,
};
hostfs/inode/inode {
  .permission         = hostfs_permission,
  .setattr            = hostfs_setattr,
};
hostfs/inode/dir {
  .create             = hostfs_create,
  .lookup             = hostfs_lookup,
  .link               = hostfs_link,
  .unlink             = hostfs_unlink,
  .symlink            = hostfs_symlink,
  .mkdir              = hostfs_mkdir,
  .rmdir              = hostfs_rmdir,
  .mknod              = hostfs_mknod,
  .rename2            = hostfs_rename2,
  .permission         = hostfs_permission,
  .setattr            = hostfs_setattr,
};
hostfs/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = hostfs_follow_link,
  .put_link           = hostfs_put_link,
};
hostfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "hostfs",
  .mount              = hostfs_read_sb,
  .kill_sb            = hostfs_kill_sb,
};
hpfs/dentry/dentry {
  .d_hash             = hpfs_hash_dentry,
  .d_compare          = hpfs_compare_dentry,
};
hpfs/addr/symlink {
  .readpage           = hpfs_symlink_readpage
};
hpfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "hpfs",
  .mount              = hpfs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
hpfs/addr/addr {
  .readpage           = hpfs_readpage,
  .writepage          = hpfs_writepage,
  .readpages          = hpfs_readpages,
  .writepages         = hpfs_writepages,
  .write_begin        = hpfs_write_begin,
  .write_end          = hpfs_write_end,
  .bmap               = _hpfs_bmap
};
file_operations hppfs_file_fops {
  .llseek             = hppfs_llseek,
  .read               = hppfs_read,
  .write              = hppfs_write,
  .open               = hppfs_open,
  .release            = hppfs_release,
};
file_operations hppfs_dir_fops {
  .iterate            = hppfs_readdir,
  .open               = hppfs_dir_open,
  .llseek             = default_llseek,
  .release            = hppfs_release,
};
hppfs/super/super {
  .alloc_inode        = hppfs_alloc_inode,
  .destroy_inode      = hppfs_destroy_inode,
  .evict_inode        = hppfs_evict_inode,
  .statfs             = hppfs_statfs,
};
inode_operations hppfs_dir_iops {
  .lookup             = hppfs_lookup,
};
inode_operations hppfs_link_iops {
  .readlink           = hppfs_readlink,
  .follow_link        = hppfs_follow_link,
  .put_link           = hppfs_put_link,
};
file_system_type hppfs_type {
  .owner              = THIS_MODULE,
  .name               = "hppfs",
  .mount              = hppfs_read_super,
  .kill_sb            = kill_anon_super,
};
hugetlbfs/addr/addr {
  .write_begin        = hugetlbfs_write_begin,
  .write_end          = hugetlbfs_write_end,
  .set_page_dirty     = hugetlbfs_set_page_dirty,
  .migratepage        = hugetlbfs_migrate_page,
};
hugetlbfs/file/file {
  .read               = hugetlbfs_read,
  .mmap               = hugetlbfs_file_mmap,
  .fsync              = noop_fsync,
  .get_unmapped_area  = hugetlb_get_unmapped_area,
  .llseek             = default_llseek,
};
hugetlbfs/inode/dir {
  .create             = hugetlbfs_create,
  .lookup             = simple_lookup,
  .link               = simple_link,
  .unlink             = simple_unlink,
  .symlink            = hugetlbfs_symlink,
  .mkdir              = hugetlbfs_mkdir,
  .rmdir              = simple_rmdir,
  .mknod              = hugetlbfs_mknod,
  .rename             = simple_rename,
  .setattr            = hugetlbfs_setattr,
};
inode_operations hugetlbfs_inode_operations {
  .setattr            = hugetlbfs_setattr,
};
super_operations hugetlbfs_ops {
  .alloc_inode        = hugetlbfs_alloc_inode,
  .destroy_inode      = hugetlbfs_destroy_inode,
  .evict_inode        = hugetlbfs_evict_inode,
  .statfs             = hugetlbfs_statfs,
  .put_super          = hugetlbfs_put_super,
  .show_options       = generic_show_options,
};
hugetlbfs/fs/fs {
  .name               = "hugetlbfs",
  .mount              = hugetlbfs_mount,
  .kill_sb            = kill_litter_super,
};
dentry_operations anon_ops {
  .d_dname            = simple_dname
};
export_operations isofs_export_ops {
  .encode_fh          = isofs_export_encode_fh,
  .fh_to_dentry       = isofs_fh_to_dentry,
  .fh_to_parent       = isofs_fh_to_parent,
  .get_parent         = isofs_export_get_parent,
};
zisofs/addr/addr {
  .readpage           = zisofs_readpage,
};
isofs/super/super {
  .alloc_inode        = isofs_alloc_inode,
  .destroy_inode      = isofs_destroy_inode,
  .put_super          = isofs_put_super,
  .statfs             = isofs_statfs,
  .remount_fs         = isofs_remount,
  .show_options       = generic_show_options,
};
dentry_operations isofs_dentry_ops {
  .d_hash             = isofs_hash,
  .d_compare          = isofs_dentry_cmp,
};
isofs/addr/addr {
  .readpage           = isofs_readpage,
  .readpages          = isofs_readpages,
  .bmap               = _isofs_bmap
};
iso9660/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "iso9660",
  .mount              = isofs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
isofs_symlink/addr/addr {
  .readpage           = rock_ridge_symlink_readpage
};
seq_operations jbd2_seq_info_ops {
  .start              = jbd2_seq_info_start,
  .next               = jbd2_seq_info_next,
  .stop               = jbd2_seq_info_stop,
  .show               = jbd2_seq_info_show,
};
file_operations jbd2_seq_info_fops {
  .owner              = THIS_MODULE,
  .open               = jbd2_seq_info_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = jbd2_seq_info_release,
};
jffs2/xattr/security {
  .prefix             = XATTR_SECURITY_PREFIX,
  .list               = jffs2_security_listxattr,
  .set                = jffs2_security_setxattr,
  .get                = jffs2_security_getxattr
};
jffs2/xattr/trusted {
  .prefix             = XATTR_TRUSTED_PREFIX,
  .list               = jffs2_trusted_listxattr,
  .set                = jffs2_trusted_setxattr,
  .get                = jffs2_trusted_getxattr
};
jffs2/export/export {
  .get_parent         = jffs2_get_parent,
  .fh_to_dentry       = jffs2_fh_to_dentry,
  .fh_to_parent       = jffs2_fh_to_parent,
};
jffs2/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "jffs2",
  .mount              = jffs2_mount,
  .kill_sb            = jffs2_kill_sb,
};
jffs2/xattr/user {
  .prefix             = XATTR_USER_PREFIX,
  .list               = jffs2_user_listxattr,
  .set                = jffs2_user_setxattr,
  .get                = jffs2_user_getxattr
};
file_operations jfs_loglevel_proc_fops {
  .owner              = THIS_MODULE,
  .open               = jfs_loglevel_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
  .write              = jfs_loglevel_proc_write,
};
jfs/inode/dir {
  .create             = jfs_create,
  .lookup             = jfs_lookup,
  .link               = jfs_link,
  .unlink             = jfs_unlink,
  .symlink            = jfs_symlink,
  .mkdir              = jfs_mkdir,
  .rmdir              = jfs_rmdir,
  .mknod              = jfs_mknod,
  .rename             = jfs_rename,
  .setxattr           = jfs_setxattr,
  .getxattr           = jfs_getxattr,
  .listxattr          = jfs_listxattr,
  .removexattr        = jfs_removexattr,
  .setattr            = jfs_setattr,
  .get_acl            = jfs_get_acl,
  .set_acl            = jfs_set_acl,
};
jfs/inode/dir {
  .read               = generic_read_dir,
  .iterate            = jfs_readdir,
  .fsync              = jfs_fsync,
  .unlocked_ioctl     = jfs_ioctl,
  .compat_ioctl       = jfs_compat_ioctl,
  .llseek             = generic_file_llseek,
};
jfs/super/super {
  .alloc_inode        = jfs_alloc_inode,
  .destroy_inode      = jfs_destroy_inode,
  .dirty_inode        = jfs_dirty_inode,
  .write_inode        = jfs_write_inode,
  .evict_inode        = jfs_evict_inode,
  .put_super          = jfs_put_super,
  .sync_fs            = jfs_sync_fs,
  .freeze_fs          = jfs_freeze,
  .unfreeze_fs        = jfs_unfreeze,
  .statfs             = jfs_statfs,
  .remount_fs         = jfs_remount,
  .show_options       = jfs_show_options,
  .quota_read         = jfs_quota_read,
  .quota_write        = jfs_quota_write,
};
jfs/export/export {
  .fh_to_dentry       = jfs_fh_to_dentry,
  .fh_to_parent       = jfs_fh_to_parent,
  .get_parent         = jfs_get_parent,
};
jfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "jfs",
  .mount              = jfs_do_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
jfs/addr/addr {
  .readpage           = jfs_readpage,
  .readpages          = jfs_readpages,
  .writepage          = jfs_writepage,
  .writepages         = jfs_writepages,
  .write_begin        = jfs_write_begin,
  .write_end          = nobh_write_end,
  .bmap               = jfs_bmap,
  .direct_IO          = jfs_direct_IO,
};
jfs/inode/file {
  .setxattr           = jfs_setxattr,
  .getxattr           = jfs_getxattr,
  .listxattr          = jfs_listxattr,
  .removexattr        = jfs_removexattr,
  .setattr            = jfs_setattr,
  .get_acl            = jfs_get_acl,
  .set_acl            = jfs_set_acl,
};
jfs/file/file {
  .open               = jfs_open,
  .llseek             = generic_file_llseek,
  .write              = new_sync_write,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .write_iter         = generic_file_write_iter,
  .mmap               = generic_file_mmap,
  .splice_read        = generic_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .fsync              = jfs_fsync,
  .release            = jfs_release,
  .unlocked_ioctl     = jfs_ioctl,
  .compat_ioctl       = jfs_compat_ioctl,
};
jfs_fast/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = jfs_follow_link,
  .setattr            = jfs_setattr,
  .setxattr           = jfs_setxattr,
  .getxattr           = jfs_getxattr,
  .listxattr          = jfs_listxattr,
  .removexattr        = jfs_removexattr,
};
jfs/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .setattr            = jfs_setattr,
  .setxattr           = jfs_setxattr,
  .getxattr           = jfs_getxattr,
  .listxattr          = jfs_listxattr,
  .removexattr        = jfs_removexattr,
};
jfs_metapage/addr/addr {
  .readpage           = metapage_readpage,
  .writepage          = metapage_writepage,
  .releasepage        = metapage_releasepage,
  .invalidatepage     = metapage_invalidatepage,
  .set_page_dirty     = __set_page_dirty_nobuffers,
};
file_operations jfs_mpstat_proc_fops {
  .owner              = THIS_MODULE,
  .open               = jfs_mpstat_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations jfs_txanchor_proc_fops {
  .owner              = THIS_MODULE,
  .open               = jfs_txanchor_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations jfs_txstats_proc_fops {
  .owner              = THIS_MODULE,
  .open               = jfs_txstats_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations jfs_xtstat_proc_fops {
  .owner              = THIS_MODULE,
  .open               = jfs_xtstat_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations jfs_lmstats_proc_fops {
  .owner              = THIS_MODULE,
  .open               = jfs_lmstats_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
dentry_operations kernfs_dops {
  .d_revalidate       = kernfs_dop_revalidate,
  .d_release          = kernfs_dop_release,
};
inode_operations kernfs_dir_iops {
  .lookup             = kernfs_iop_lookup,
  .permission         = kernfs_iop_permission,
  .setattr            = kernfs_iop_setattr,
  .getattr            = kernfs_iop_getattr,
  .setxattr           = kernfs_iop_setxattr,
  .removexattr        = kernfs_iop_removexattr,
  .getxattr           = kernfs_iop_getxattr,
  .listxattr          = kernfs_iop_listxattr,

  .mkdir              = kernfs_iop_mkdir,
  .rmdir              = kernfs_iop_rmdir,
  .rename             = kernfs_iop_rename,
};
file_operations kernfs_dir_fops {
  .read               = generic_read_dir,
  .iterate            = kernfs_fop_readdir,
  .release            = kernfs_dir_fop_release,
  .llseek             = kernfs_dir_fop_llseek,
};
kernfs/addr/addr {
  .readpage           = simple_readpage,
  .write_begin        = simple_write_begin,
  .write_end          = simple_write_end,
};
inode_operations kernfs_iops {
  .permission         = kernfs_iop_permission,
  .setattr            = kernfs_iop_setattr,
  .getattr            = kernfs_iop_getattr,
  .setxattr           = kernfs_iop_setxattr,
  .removexattr        = kernfs_iop_removexattr,
  .getxattr           = kernfs_iop_getxattr,
  .listxattr          = kernfs_iop_listxattr,
};
kernfs/super/super {
  .statfs             = simple_statfs,
  .drop_inode         = generic_delete_inode,
  .evict_inode        = kernfs_evict_inode,

  .remount_fs         = kernfs_sop_remount_fs,
  .show_options       = kernfs_sop_show_options,
};
seq_operations kernfs_seq_ops {
  .start              = kernfs_seq_start,
  .next               = kernfs_seq_next,
  .stop               = kernfs_seq_stop,
  .show               = kernfs_seq_show,
};
vm_operations_struct kernfs_vm_ops {
  .open               = kernfs_vma_open,
  .fault              = kernfs_vma_fault,
  .page_mkwrite       = kernfs_vma_page_mkwrite,
  .access             = kernfs_vma_access,
  .set_policy         = kernfs_vma_set_policy,
  .get_policy         = kernfs_vma_get_policy,
  .migrate            = kernfs_vma_migrate,
};
file_operations kernfs_file_fops {
  .read               = kernfs_fop_read,
  .write              = kernfs_fop_write,
  .llseek             = generic_file_llseek,
  .mmap               = kernfs_fop_mmap,
  .open               = kernfs_fop_open,
  .release            = kernfs_fop_release,
  .poll               = kernfs_fop_poll,
};
inode_operations kernfs_symlink_iops {
  .setxattr           = kernfs_iop_setxattr,
  .removexattr        = kernfs_iop_removexattr,
  .getxattr           = kernfs_iop_getxattr,
  .listxattr          = kernfs_iop_listxattr,
  .readlink           = generic_readlink,
  .follow_link        = kernfs_iop_follow_link,
  .put_link           = kernfs_iop_put_link,
  .setattr            = kernfs_iop_setattr,
  .getattr            = kernfs_iop_getattr,
  .permission         = kernfs_iop_permission,
};
lock_manager_operations nlmsvc_lock_operations {
  .lm_compare_owner   = nlmsvc_same_owner,
  .lm_owner_key       = nlmsvc_owner_key,
  .lm_notify          = nlmsvc_notify_blocked,
  .lm_grant           = nlmsvc_grant_deferred,
};
file_lock_operations nlmclnt_lock_ops {
  .fl_copy_lock       = nlmclnt_locks_copy_lock,
  .fl_release_private = nlmclnt_locks_release_private,
};
inode_operations logfs_symlink_iops {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
};
inode_operations logfs_dir_iops {
  .create             = logfs_create,
  .link               = logfs_link,
  .lookup             = logfs_lookup,
  .mkdir              = logfs_mkdir,
  .mknod              = logfs_mknod,
  .rename             = logfs_rename,
  .rmdir              = logfs_rmdir,
  .symlink            = logfs_symlink,
  .unlink             = logfs_unlink,
};
file_operations logfs_dir_fops {
  .fsync              = logfs_fsync,
  .unlocked_ioctl     = logfs_ioctl,
  .iterate            = logfs_readdir,
  .read               = generic_read_dir,
  .llseek             = default_llseek,
};
logfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "logfs",
  .mount              = logfs_mount,
  .kill_sb            = logfs_kill_sb,
  .fs_flags           = FS_REQUIRES_DEV,

};
logfs/super/super {
  .alloc_inode        = logfs_alloc_inode,
  .destroy_inode      = logfs_destroy_inode,
  .evict_inode        = logfs_evict_inode,
  .drop_inode         = logfs_drop_inode,
  .put_super          = logfs_put_super,
  .write_inode        = logfs_write_inode,
  .statfs             = logfs_statfs,
  .sync_fs            = logfs_sync_fs,
};
inode_operations logfs_reg_iops {
  .setattr            = logfs_setattr,
};
file_operations logfs_reg_fops {
  .read_iter          = generic_file_read_iter,
  .write_iter         = generic_file_write_iter,
  .fsync              = logfs_fsync,
  .unlocked_ioctl     = logfs_ioctl,
  .llseek             = generic_file_llseek,
  .mmap               = generic_file_readonly_mmap,
  .open               = generic_file_open,
  .read               = new_sync_read,
  .write              = new_sync_write,
};
logfs_reg/addr/addr {
  .invalidatepage     = logfs_invalidatepage,
  .readpage           = logfs_readpage,
  .releasepage        = logfs_releasepage,
  .set_page_dirty     = __set_page_dirty_nobuffers,
  .writepage          = logfs_writepage,
  .writepages         = generic_writepages,
  .write_begin        = logfs_write_begin,
  .write_end          = logfs_write_end,
};
mapping/addr/addr {
  .invalidatepage     = map_invalidatepage,
  .releasepage        = map_releasepage,
  .set_page_dirty     = __set_page_dirty_nobuffers,
};
minix/inode/dir {
  .create             = minix_create,
  .lookup             = minix_lookup,
  .link               = minix_link,
  .unlink             = minix_unlink,
  .symlink            = minix_symlink,
  .mkdir              = minix_mkdir,
  .rmdir              = minix_rmdir,
  .mknod              = minix_mknod,
  .rename             = minix_rename,
  .getattr            = minix_getattr,
  .tmpfile            = minix_tmpfile,
};
minix/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = minix_readdir,
  .fsync              = generic_file_fsync,
};
minix/super/super {
  .alloc_inode        = minix_alloc_inode,
  .destroy_inode      = minix_destroy_inode,
  .write_inode        = minix_write_inode,
  .evict_inode        = minix_evict_inode,
  .put_super          = minix_put_super,
  .statfs             = minix_statfs,
  .remount_fs         = minix_remount,
};
minix/addr/addr {
  .readpage           = minix_readpage,
  .writepage          = minix_writepage,
  .write_begin        = minix_write_begin,
  .write_end          = generic_write_end,
  .bmap               = minix_bmap
};
minix/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .getattr            = minix_getattr,
};
minix/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "minix",
  .mount              = minix_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
minix/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .write              = new_sync_write,
  .write_iter         = generic_file_write_iter,
  .mmap               = generic_file_mmap,
  .fsync              = generic_file_fsync,
  .splice_read        = generic_file_splice_read,
};
minix/inode/file {
  .setattr            = minix_setattr,
  .getattr            = minix_getattr,
};
ncp/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .setattr            = ncp_notify_change,
};
ncp/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "ncpfs",
  .mount              = ncp_mount,
  .kill_sb            = kill_anon_super,
  .fs_flags           = FS_BINARY_MOUNTDATA,
};
ncp_symlink/addr/addr {
  .readpage           = ncp_symlink_readpage,
};
seq_operations nfs_server_list_ops {
  .start              = nfs_server_list_start,
  .next               = nfs_server_list_next,
  .stop               = nfs_server_list_stop,
  .show               = nfs_server_list_show,
};
file_operations nfs_server_list_fops {
  .open               = nfs_server_list_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_net,
  .owner              = THIS_MODULE,
};
seq_operations nfs_volume_list_ops {
  .start              = nfs_volume_list_start,
  .next               = nfs_volume_list_next,
  .stop               = nfs_volume_list_stop,
  .show               = nfs_volume_list_show,
};
file_operations nfs_volume_list_fops {
  .open               = nfs_volume_list_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_net,
  .owner              = THIS_MODULE,
};
file_lock_operations nfs4_fl_lock_ops {
  .fl_copy_lock       = nfs4_fl_copy_lock,
  .fl_release_private = nfs4_fl_release_lock,
};
nfs4/file/file {
  .llseek             = nfs_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = nfs_file_read,
  .write_iter         = nfs_file_write,
  .mmap               = nfs_file_mmap,
  .open               = nfs4_file_open,
  .flush              = nfs_file_flush,
  .release            = nfs_file_release,
  .fsync              = nfs4_file_fsync,
  .lock               = nfs_lock,
  .flock              = nfs_flock,
  .splice_read        = nfs_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .check_flags        = nfs_check_flags,
  .setlease           = nfs_setlease,
};
nfs/inode/dir {
  .llseek             = nfs_llseek_dir,
  .read               = generic_read_dir,
  .iterate            = nfs_readdir,
  .open               = nfs_opendir,
  .release            = nfs_closedir,
  .fsync              = nfs_fsync_dir,
};
nfs_dir/addr/addr {
  .freepage           = nfs_readdir_clear_array,
};
nfs/dentry/dentry {
  .d_revalidate       = nfs_lookup_revalidate,
  .d_weak_revalidate  = nfs_weak_revalidate,
  .d_delete           = nfs_dentry_delete,
  .d_iput             = nfs_dentry_iput,
  .d_automount        = nfs_d_automount,
  .d_release          = nfs_d_release,
};
nfs4/dentry/dentry {
  .d_revalidate       = nfs4_lookup_revalidate,
  .d_delete           = nfs_dentry_delete,
  .d_iput             = nfs_dentry_iput,
  .d_automount        = nfs_d_automount,
  .d_release          = nfs_d_release,
};
nfs/inode/dir {
  .create             = nfs_create,
  .lookup             = nfs_lookup,
  .link               = nfs_link,
  .unlink             = nfs_unlink,
  .symlink            = nfs_symlink,
  .mkdir              = nfs_mkdir,
  .rmdir              = nfs_rmdir,
  .mknod              = nfs_mknod,
  .rename             = nfs_rename,
  .permission         = nfs_permission,
  .getattr            = nfs_getattr,
  .setattr            = nfs_setattr,
};
nfs/inode/file {
  .permission         = nfs_permission,
  .getattr            = nfs_getattr,
  .setattr            = nfs_setattr,
};
nfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "nfs",
  .mount              = nfs_fs_mount,
  .kill_sb            = nfs_kill_super,
  .fs_flags           = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA,
};
nfs_xdev/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "nfs",
  .mount              = nfs_xdev_mount,
  .kill_sb            = nfs_kill_super,
  .fs_flags           = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA,
};
nfs/super/super {
  .alloc_inode        = nfs_alloc_inode,
  .destroy_inode      = nfs_destroy_inode,
  .write_inode        = nfs_write_inode,
  .drop_inode         = nfs_drop_inode,
  .put_super          = nfs_put_super,
  .statfs             = nfs_statfs,
  .evict_inode        = nfs_evict_inode,
  .umount_begin       = nfs_umount_begin,
  .show_options       = nfs_show_options,
  .show_devname       = nfs_show_devname,
  .show_path          = nfs_show_path,
  .show_stats         = nfs_show_stats,
  .remount_fs         = nfs_remount,
};
nfs4/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "nfs4",
  .mount              = nfs_fs_mount,
  .kill_sb            = nfs_kill_super,
  .fs_flags           = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA,
};
nfs_file/addr/addr {
  .readpage           = nfs_readpage,
  .readpages          = nfs_readpages,
  .set_page_dirty     = __set_page_dirty_nobuffers,
  .writepage          = nfs_writepage,
  .writepages         = nfs_writepages,
  .write_begin        = nfs_write_begin,
  .write_end          = nfs_write_end,
  .invalidatepage     = nfs_invalidate_page,
  .releasepage        = nfs_release_page,
  .direct_IO          = nfs_direct_IO,
  .migratepage        = nfs_migrate_page,
  .launder_page       = nfs_launder_page,
  .is_dirty_writeback = nfs_check_dirty_writeback,
  .error_remove_page  = generic_error_remove_page,
  .swap_activate      = nfs_swap_activate,
  .swap_deactivate    = nfs_swap_deactivate,
};
nfs/vm/file {
  .fault              = filemap_fault,
  .map_pages          = filemap_map_pages,
  .page_mkwrite       = nfs_vm_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
nfs/file/file {
  .llseek             = nfs_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = nfs_file_read,
  .write_iter         = nfs_file_write,
  .mmap               = nfs_file_mmap,
  .open               = nfs_file_open,
  .flush              = nfs_file_flush,
  .release            = nfs_file_release,
  .fsync              = nfs_file_fsync,
  .lock               = nfs_lock,
  .flock              = nfs_flock,
  .splice_read        = nfs_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .check_flags        = nfs_check_flags,
  .setlease           = nfs_setlease,
};
xattr_handler nfs4_xattr_nfs4_label_handler {
  .prefix             = XATTR_SECURITY_PREFIX,
  .list               = nfs4_xattr_list_nfs4_label,
  .get                = nfs4_xattr_get_nfs4_label,
  .set                = nfs4_xattr_set_nfs4_label,
};
nfs4/inode/dir {
  .create             = nfs_create,
  .lookup             = nfs_lookup,
  .atomic_open        = nfs_atomic_open,
  .link               = nfs_link,
  .unlink             = nfs_unlink,
  .symlink            = nfs_symlink,
  .mkdir              = nfs_mkdir,
  .rmdir              = nfs_rmdir,
  .mknod              = nfs_mknod,
  .rename             = nfs_rename,
  .permission         = nfs_permission,
  .getattr            = nfs_getattr,
  .setattr            = nfs_setattr,
  .getxattr           = generic_getxattr,
  .setxattr           = generic_setxattr,
  .listxattr          = generic_listxattr,
  .removexattr        = generic_removexattr,
};
nfs4/inode/file {
  .permission         = nfs_permission,
  .getattr            = nfs_getattr,
  .setattr            = nfs_setattr,
  .getxattr           = generic_getxattr,
  .setxattr           = generic_setxattr,
  .listxattr          = generic_listxattr,
  .removexattr        = generic_removexattr,
};
xattr_handler nfs4_xattr_nfs4_acl_handler {
  .prefix             = XATTR_NAME_NFSV4_ACL,
  .list               = nfs4_xattr_list_nfs4_acl,
  .get                = nfs4_xattr_get_nfs4_acl,
  .set                = nfs4_xattr_set_nfs4_acl,
};
xattr_handler *nfs4_xattr_handlers {
&nfs4_xattr_nfs4_acl_handler,
&nfs4_xattr_nfs4_label_handler,
NULL
};
nfs/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = nfs_follow_link,
  .put_link           = page_put_link,
  .getattr            = nfs_getattr,
  .setattr            = nfs_setattr,
};
nfs4_remote/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "nfs4",
  .mount              = nfs4_remote_mount,
  .kill_sb            = nfs_kill_super,
  .fs_flags           = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA,
};
nfs4_remote_referral/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "nfs4",
  .mount              = nfs4_remote_referral_mount,
  .kill_sb            = nfs_kill_super,
  .fs_flags           = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA,
};
nfs4_referral/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "nfs4",
  .mount              = nfs4_referral_mount,
  .kill_sb            = nfs_kill_super,
  .fs_flags           = FS_RENAME_DOES_D_MOVE|FS_BINARY_MOUNTDATA,
};
nfs4/super/super {
  .alloc_inode        = nfs_alloc_inode,
  .destroy_inode      = nfs_destroy_inode,
  .write_inode        = nfs4_write_inode,
  .drop_inode         = nfs_drop_inode,
  .put_super          = nfs_put_super,
  .statfs             = nfs_statfs,
  .evict_inode        = nfs4_evict_inode,
  .umount_begin       = nfs_umount_begin,
  .show_options       = nfs_show_options,
  .show_devname       = nfs_show_devname,
  .show_path          = nfs_show_path,
  .show_stats         = nfs_show_stats,
  .remount_fs         = nfs_remount,
};
nfs3/inode/dir {
  .create             = nfs_create,
  .lookup             = nfs_lookup,
  .link               = nfs_link,
  .unlink             = nfs_unlink,
  .symlink            = nfs_symlink,
  .mkdir              = nfs_mkdir,
  .rmdir              = nfs_rmdir,
  .mknod              = nfs_mknod,
  .rename             = nfs_rename,
  .permission         = nfs_permission,
  .getattr            = nfs_getattr,
  .setattr            = nfs_setattr,
  .listxattr          = nfs3_listxattr,
  .getxattr           = generic_getxattr,
  .setxattr           = generic_setxattr,
  .removexattr        = generic_removexattr,
  .get_acl            = nfs3_get_acl,
  .set_acl            = nfs3_set_acl,
};
nfs3/inode/file {
  .permission         = nfs_permission,
  .getattr            = nfs_getattr,
  .setattr            = nfs_setattr,
  .listxattr          = nfs3_listxattr,
  .getxattr           = generic_getxattr,
  .setxattr           = generic_setxattr,
  .removexattr        = generic_removexattr,
  .get_acl            = nfs3_get_acl,
  .set_acl            = nfs3_set_acl,
};
xattr_handler *nfs3_xattr_handlers {
&posix_acl_access_xattr_handler,
&posix_acl_default_xattr_handler,
NULL,
};
inode_operations nfs_mountpoint_inode_operations {
  .getattr            = nfs_getattr,
  .setattr            = nfs_setattr,
};
inode_operations nfs_referral_inode_operations {
  .getattr            = nfs_namespace_getattr,
  .setattr            = nfs_namespace_setattr,
};
lock_manager_operations nfsd_lease_mng_ops {
  .lm_break           = nfsd_break_deleg_cb,
  .lm_change          = nfsd_change_deleg_cb,
};
lock_manager_operations nfsd_posix_mng_ops  {
};
file_operations transaction_ops {
  .write              = nfsctl_transaction_write,
  .read               = nfsctl_transaction_read,
  .release            = simple_transaction_release,
  .llseek             = default_llseek,
};
file_operations exports_proc_operations {
  .open               = exports_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
  .owner              = THIS_MODULE,
};
file_operations exports_nfsd_operations {
  .open               = exports_nfsd_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
  .owner              = THIS_MODULE,
};
file_operations export_features_operations {
  .open               = export_features_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations supported_enctypes_ops {
  .open               = supported_enctypes_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations pool_stats_operations {
  .open               = nfsd_pool_stats_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = nfsd_pool_stats_release,
  .owner              = THIS_MODULE,
};
file_operations reply_cache_stats_operations {
  .open               = nfsd_reply_cache_stats_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
nfsd/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "nfsd",
  .mount              = nfsd_mount,
  .kill_sb            = nfsd_umount,
};
seq_operations nfs_exports_op {
  .start              = e_start,
  .next               = e_next,
  .stop               = e_stop,
  .show               = e_show,
};
file_operations fops_nfsd {
  .owner              = THIS_MODULE,
  .read               = fault_inject_read,
  .write              = fault_inject_write,
};
file_operations nfsd_proc_fops {
  .owner              = THIS_MODULE,
  .open               = nfsd_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
def_mdt/addr/addr {
  .writepage          = nilfs_mdt_write_page,
};
nilfs/inode/dir {
  .create             = nilfs_create,
  .lookup             = nilfs_lookup,
  .link               = nilfs_link,
  .unlink             = nilfs_unlink,
  .symlink            = nilfs_symlink,
  .mkdir              = nilfs_mkdir,
  .rmdir              = nilfs_rmdir,
  .mknod              = nilfs_mknod,
  .rename             = nilfs_rename,
  .setattr            = nilfs_setattr,
  .permission         = nilfs_permission,
  .fiemap             = nilfs_fiemap,
};
nilfs/inode/special {
  .setattr            = nilfs_setattr,
  .permission         = nilfs_permission,
};
nilfs/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .permission         = nilfs_permission,
};
export_operations nilfs_export_ops {
  .encode_fh          = nilfs_encode_fh,
  .fh_to_dentry       = nilfs_fh_to_dentry,
  .fh_to_parent       = nilfs_fh_to_parent,
  .get_parent         = nilfs_get_parent,
};
nilfs/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = nilfs_readdir,
  .unlocked_ioctl     = nilfs_ioctl,
  .compat_ioctl       = nilfs_compat_ioctl,
  .fsync              = nilfs_sync_file,

};
nilfs/super/super {
  .alloc_inode        = nilfs_alloc_inode,
  .destroy_inode      = nilfs_destroy_inode,
  .dirty_inode        = nilfs_dirty_inode,
  .evict_inode        = nilfs_evict_inode,
  .put_super          = nilfs_put_super,
  .sync_fs            = nilfs_sync_fs,
  .freeze_fs          = nilfs_freeze,
  .unfreeze_fs        = nilfs_unfreeze,
  .statfs             = nilfs_statfs,
  .remount_fs         = nilfs_remount,
  .show_options       = nilfs_show_options
};
nilfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "nilfs2",
  .mount              = nilfs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
nilfs/addr/addr {
  .writepage          = nilfs_writepage,
  .readpage           = nilfs_readpage,
  .writepages         = nilfs_writepages,
  .set_page_dirty     = nilfs_set_page_dirty,
  .readpages          = nilfs_readpages,
  .write_begin        = nilfs_write_begin,
  .write_end          = nilfs_write_end,
  .invalidatepage     = block_invalidatepage,
  .direct_IO          = nilfs_direct_IO,
  .is_partially_uptodate= block_is_partially_uptodate,
};
nilfs/vm/file {
  .fault              = filemap_fault,
  .map_pages          = filemap_map_pages,
  .page_mkwrite       = nilfs_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
nilfs/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = generic_file_read_iter,
  .write_iter         = generic_file_write_iter,
  .unlocked_ioctl     = nilfs_ioctl,
  .compat_ioctl       = nilfs_compat_ioctl,
  .mmap               = nilfs_file_mmap,
  .open               = generic_file_open,
  .fsync              = nilfs_sync_file,
  .splice_read        = generic_file_splice_read,
};
nilfs/inode/file {
  .setattr            = nilfs_setattr,
  .permission         = nilfs_permission,
  .fiemap             = nilfs_fiemap,
};
sysfs_ops nilfs_snapshot_attr_ops {
  .show               = nilfs_snapshot_attr_show,
  .store              = nilfs_snapshot_attr_store,
};
sysfs_ops nilfs_dev_attr_ops {
  .show               = nilfs_dev_attr_show,
  .store              = nilfs_dev_attr_store,
};
file_operations fanotify_fops {
  .show_fdinfo        = fanotify_show_fdinfo,
  .poll               = fanotify_poll,
  .read               = fanotify_read,
  .write              = fanotify_write,
  .release            = fanotify_release,
  .unlocked_ioctl     = fanotify_ioctl,
  .compat_ioctl       = fanotify_ioctl,
  .llseek             = noop_llseek,
};
file_operations inotify_fops {
  .show_fdinfo        = inotify_show_fdinfo,
  .poll               = inotify_poll,
  .read               = inotify_read,
  .fasync             = fsnotify_fasync,
  .release            = inotify_release,
  .unlocked_ioctl     = inotify_ioctl,
  .compat_ioctl       = inotify_ioctl,
  .llseek             = noop_llseek,
};
inode_operations ntfs_dir_inode_ops {
  .lookup             = ntfs_lookup,
};
export_operations ntfs_export_ops {
  .get_parent         = ntfs_get_parent,
  .fh_to_dentry       = ntfs_fh_to_dentry,
  .fh_to_parent       = ntfs_fh_to_parent,
};
file_operations ntfs_dir_ops {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = ntfs_readdir,
  .fsync              = ntfs_dir_fsync,
  .open               = ntfs_dir_open,
};
ntfs/super/super {
  .alloc_inode        = ntfs_alloc_big_inode,
  .destroy_inode      = ntfs_destroy_big_inode,
  .write_inode        = ntfs_write_inode,
  .put_super          = ntfs_put_super,
  .statfs             = ntfs_statfs,
  .remount_fs         = ntfs_remount,
  .evict_inode        = ntfs_evict_big_inode,
  .show_options       = ntfs_show_options,
};
ntfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "ntfs",
  .mount              = ntfs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
file_operations ntfs_file_ops {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .write              = do_sync_write,
  .aio_write          = ntfs_file_aio_write,
  .fsync              = ntfs_file_fsync,
  .mmap               = generic_file_mmap,
  .open               = ntfs_file_open,
  .splice_read        = generic_file_splice_read
};
inode_operations ntfs_file_inode_ops {
  .setattr            = ntfs_setattr,
};
ntfs/addr/addr {
  .readpage           = ntfs_readpage,
  .writepage          = ntfs_writepage,
  .migratepage        = buffer_migrate_page,
  .error_remove_page  = generic_error_remove_page,
};
ntfs_mst/addr/addr {
  .readpage           = ntfs_readpage,
  .writepage          = ntfs_writepage,
  .set_page_dirty     = __set_page_dirty_nobuffers,
  .migratepage        = buffer_migrate_page,
  .error_remove_page  = generic_error_remove_page,
};
ocfs2/vm/file {
  .fault              = ocfs2_fault,
  .page_mkwrite       = ocfs2_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
inode_operations ocfs2_dir_iops {
  .create             = ocfs2_create,
  .lookup             = ocfs2_lookup,
  .link               = ocfs2_link,
  .unlink             = ocfs2_unlink,
  .rmdir              = ocfs2_unlink,
  .symlink            = ocfs2_symlink,
  .mkdir              = ocfs2_mkdir,
  .mknod              = ocfs2_mknod,
  .rename             = ocfs2_rename,
  .setattr            = ocfs2_setattr,
  .getattr            = ocfs2_getattr,
  .permission         = ocfs2_permission,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ocfs2_listxattr,
  .removexattr        = generic_removexattr,
  .fiemap             = ocfs2_fiemap,
  .get_acl            = ocfs2_iop_get_acl,
  .set_acl            = ocfs2_iop_set_acl,
};
file_operations ocfs2_control_fops {
  .open               = ocfs2_control_open,
  .release            = ocfs2_control_release,
  .read               = ocfs2_control_read,
  .write              = ocfs2_control_write,
  .owner              = THIS_MODULE,
  .llseek             = default_llseek,
};
export_operations ocfs2_export_ops {
  .encode_fh          = ocfs2_encode_fh,
  .fh_to_dentry       = ocfs2_fh_to_dentry,
  .fh_to_parent       = ocfs2_fh_to_parent,
  .get_parent         = ocfs2_get_parent,
};
dquot_operations ocfs2_quota_operations {
  .acquire_dquot      = ocfs2_acquire_dquot,
  .release_dquot      = ocfs2_release_dquot,
  .mark_dirty         = ocfs2_mark_dquot_dirty,
  .write_info         = ocfs2_write_info,
  .alloc_dquot        = ocfs2_alloc_dquot,
  .destroy_dquot      = ocfs2_destroy_dquot,
};
ocfs2/super/super {
  .statfs             = ocfs2_statfs,
  .alloc_inode        = ocfs2_alloc_inode,
  .destroy_inode      = ocfs2_destroy_inode,
  .drop_inode         = ocfs2_drop_inode,
  .evict_inode        = ocfs2_evict_inode,
  .sync_fs            = ocfs2_sync_fs,
  .put_super          = ocfs2_put_super,
  .remount_fs         = ocfs2_remount,
  .show_options       = ocfs2_show_options,
  .quota_read         = ocfs2_quota_read,
  .quota_write        = ocfs2_quota_write,
};
file_operations ocfs2_osb_debug_fops {
  .open               = ocfs2_osb_debug_open,
  .release            = ocfs2_debug_release,
  .read               = ocfs2_debug_read,
  .llseek             = generic_file_llseek,
};
quotactl_ops ocfs2_quotactl_ops {
  .quota_on_meta      = ocfs2_quota_on,
  .quota_off          = ocfs2_quota_off,
  .quota_sync         = dquot_quota_sync,
  .get_info           = dquot_get_dqinfo,
  .set_info           = dquot_set_dqinfo,
  .get_dqblk          = dquot_get_dqblk,
  .set_dqblk          = dquot_set_dqblk,
};
ocfs2/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "ocfs2",
  .mount              = ocfs2_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV|FS_RENAME_DOES_D_MOVE,
};
dentry_operations ocfs2_dentry_ops {
  .d_revalidate       = ocfs2_dentry_revalidate,
  .d_iput             = ocfs2_dentry_iput,
};
seq_operations ocfs2_dlm_seq_ops {
  .start              = ocfs2_dlm_seq_start,
  .stop               = ocfs2_dlm_seq_stop,
  .next               = ocfs2_dlm_seq_next,
  .show               = ocfs2_dlm_seq_show,
};
file_operations ocfs2_dlm_debug_fops {
  .open               = ocfs2_dlm_debug_open,
  .release            = ocfs2_dlm_debug_release,
  .read               = seq_read,
  .llseek             = seq_lseek,
};
inode_operations ocfs2_file_iops {
  .setattr            = ocfs2_setattr,
  .getattr            = ocfs2_getattr,
  .permission         = ocfs2_permission,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ocfs2_listxattr,
  .removexattr        = generic_removexattr,
  .fiemap             = ocfs2_fiemap,
  .get_acl            = ocfs2_iop_get_acl,
  .set_acl            = ocfs2_iop_set_acl,
};
inode_operations ocfs2_special_file_iops {
  .setattr            = ocfs2_setattr,
  .getattr            = ocfs2_getattr,
  .permission         = ocfs2_permission,
  .get_acl            = ocfs2_iop_get_acl,
  .set_acl            = ocfs2_iop_set_acl,
};
file_operations ocfs2_fops {
  .llseek             = ocfs2_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .mmap               = ocfs2_mmap,
  .fsync              = ocfs2_sync_file,
  .release            = ocfs2_file_release,
  .open               = ocfs2_file_open,
  .read_iter          = ocfs2_file_read_iter,
  .write_iter         = ocfs2_file_write_iter,
  .unlocked_ioctl     = ocfs2_ioctl,
  .compat_ioctl       = ocfs2_compat_ioctl,
  .lock               = ocfs2_lock,
  .flock              = ocfs2_flock,
  .splice_read        = ocfs2_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .fallocate          = ocfs2_fallocate,
};
file_operations ocfs2_dops {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = ocfs2_readdir,
  .fsync              = ocfs2_sync_file,
  .release            = ocfs2_dir_release,
  .open               = ocfs2_dir_open,
  .unlocked_ioctl     = ocfs2_ioctl,
  .compat_ioctl       = ocfs2_compat_ioctl,
  .lock               = ocfs2_lock,
  .flock              = ocfs2_flock,
};
file_operations ocfs2_fops_no_plocks {
  .llseek             = ocfs2_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .mmap               = ocfs2_mmap,
  .fsync              = ocfs2_sync_file,
  .release            = ocfs2_file_release,
  .open               = ocfs2_file_open,
  .read_iter          = ocfs2_file_read_iter,
  .write_iter         = ocfs2_file_write_iter,
  .unlocked_ioctl     = ocfs2_ioctl,
  .compat_ioctl       = ocfs2_compat_ioctl,
  .flock              = ocfs2_flock,
  .splice_read        = ocfs2_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .fallocate          = ocfs2_fallocate,
};
file_operations ocfs2_dops_no_plocks {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = ocfs2_readdir,
  .fsync              = ocfs2_sync_file,
  .release            = ocfs2_dir_release,
  .open               = ocfs2_dir_open,
  .unlocked_ioctl     = ocfs2_ioctl,
  .compat_ioctl       = ocfs2_compat_ioctl,
  .flock              = ocfs2_flock,
};
ocfs2_fast_symlink/addr/addr {
  .readpage           = ocfs2_fast_symlink_readpage,
};
ocfs2/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .getattr            = ocfs2_getattr,
  .setattr            = ocfs2_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .listxattr          = ocfs2_listxattr,
  .removexattr        = generic_removexattr,
  .fiemap             = ocfs2_fiemap,
};
ocfs2/addr/addr {
  .readpage           = ocfs2_readpage,
  .readpages          = ocfs2_readpages,
  .writepage          = ocfs2_writepage,
  .write_begin        = ocfs2_write_begin,
  .write_end          = ocfs2_write_end,
  .bmap               = ocfs2_bmap,
  .direct_IO          = ocfs2_direct_IO,
  .invalidatepage     = block_invalidatepage,
  .releasepage        = ocfs2_releasepage,
  .migratepage        = buffer_migrate_page,
  .is_partially_uptodate= block_is_partially_uptodate,
  .error_remove_page  = generic_error_remove_page,
};
ocfs2/xattr/security {
  .prefix             = XATTR_SECURITY_PREFIX,
  .list               = ocfs2_xattr_security_list,
  .get                = ocfs2_xattr_security_get,
  .set                = ocfs2_xattr_security_set,
};
ocfs2/xattr/trusted {
  .prefix             = XATTR_TRUSTED_PREFIX,
  .list               = ocfs2_xattr_trusted_list,
  .get                = ocfs2_xattr_trusted_get,
  .set                = ocfs2_xattr_trusted_set,
};
ocfs2/xattr/user {
  .prefix             = XATTR_USER_PREFIX,
  .list               = ocfs2_xattr_user_list,
  .get                = ocfs2_xattr_user_get,
  .set                = ocfs2_xattr_user_set,
};
dlmfs/file/file {
  .open               = dlmfs_file_open,
  .release            = dlmfs_file_release,
  .poll               = dlmfs_file_poll,
  .read               = dlmfs_file_read,
  .write              = dlmfs_file_write,
  .llseek             = default_llseek,
};
dlmfs/inode/dir {
  .create             = dlmfs_create,
  .lookup             = simple_lookup,
  .unlink             = dlmfs_unlink,
};
inode_operations dlmfs_root_inode_operations {
  .lookup             = simple_lookup,
  .mkdir              = dlmfs_mkdir,
  .rmdir              = simple_rmdir,
};
super_operations dlmfs_ops {
  .statfs             = simple_statfs,
  .alloc_inode        = dlmfs_alloc_inode,
  .destroy_inode      = dlmfs_destroy_inode,
  .evict_inode        = dlmfs_evict_inode,
  .drop_inode         = generic_delete_inode,
};
dlmfs/inode/file {
  .getattr            = simple_getattr,
  .setattr            = dlmfs_file_setattr,
};
dlmfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "ocfs2_dlmfs",
  .mount              = dlmfs_mount,
  .kill_sb            = kill_litter_super,
};
sysfs_ops mlog_attr_ops {
  .show               = mlog_show,
  .store              = mlog_store,
};
file_operations o2hb_debug_fops {
  .open               = o2hb_debug_open,
  .release            = o2hb_debug_release,
  .read               = o2hb_debug_read,
  .llseek             = generic_file_llseek,
};
seq_operations nst_seq_ops {
  .start              = nst_seq_start,
  .next               = nst_seq_next,
  .stop               = nst_seq_stop,
  .show               = nst_seq_show,
};
file_operations nst_seq_fops {
  .open               = nst_fop_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = nst_fop_release,
};
seq_operations sc_seq_ops {
  .start              = sc_seq_start,
  .next               = sc_seq_next,
  .stop               = sc_seq_stop,
  .show               = sc_seq_show,
};
file_operations stats_seq_fops {
  .open               = stats_fop_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = sc_fop_release,
};
file_operations sc_seq_fops {
  .open               = sc_fop_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = sc_fop_release,
};
file_operations nodes_fops {
  .open               = nodes_fop_open,
  .release            = o2net_debug_release,
  .read               = o2net_debug_read,
  .llseek             = generic_file_llseek,
};
file_operations debug_purgelist_fops {
  .open               = debug_purgelist_open,
  .release            = debug_release,
  .read               = debug_read,
  .llseek             = generic_file_llseek,
};
file_operations debug_mle_fops {
  .open               = debug_mle_open,
  .release            = debug_release,
  .read               = debug_read,
  .llseek             = generic_file_llseek,
};
seq_operations debug_lockres_ops {
  .start              = lockres_seq_start,
  .stop               = lockres_seq_stop,
  .next               = lockres_seq_next,
  .show               = lockres_seq_show,
};
file_operations debug_lockres_fops {
  .open               = debug_lockres_open,
  .release            = debug_lockres_release,
  .read               = seq_read,
  .llseek             = seq_lseek,
};
file_operations debug_state_fops {
  .open               = debug_state_open,
  .release            = debug_release,
  .read               = debug_read,
  .llseek             = generic_file_llseek,
};
inode_operations omfs_dir_inops {
  .lookup             = omfs_lookup,
  .mkdir              = omfs_mkdir,
  .rename             = omfs_rename,
  .create             = omfs_create,
  .unlink             = omfs_remove,
  .rmdir              = omfs_remove,
};
omfs/inode/dir {
  .read               = generic_read_dir,
  .iterate            = omfs_readdir,
  .llseek             = generic_file_llseek,
};
omfs/super/super {
  .write_inode        = omfs_write_inode,
  .evict_inode        = omfs_evict_inode,
  .put_super          = omfs_put_super,
  .statfs             = omfs_statfs,
  .show_options       = generic_show_options,
};
omfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "omfs",
  .mount              = omfs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
omfs/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = generic_file_read_iter,
  .write_iter         = generic_file_write_iter,
  .mmap               = generic_file_mmap,
  .fsync              = generic_file_fsync,
  .splice_read        = generic_file_splice_read,
};
inode_operations omfs_file_inops {
  .setattr            = omfs_setattr,
};
omfs/addr/addr {
  .readpage           = omfs_readpage,
  .readpages          = omfs_readpages,
  .writepage          = omfs_writepage,
  .writepages         = omfs_writepages,
  .write_begin        = omfs_write_begin,
  .write_end          = generic_write_end,
  .bmap               = omfs_bmap,
};
seq_operations property_op {
  .start              = property_start,
  .next               = property_next,
  .stop               = property_stop,
  .show               = property_show
};
file_operations openpromfs_prop_ops {
  .open               = property_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
};
file_operations openprom_operations {
  .read               = generic_read_dir,
  .iterate            = openpromfs_readdir,
  .llseek             = generic_file_llseek,
};
inode_operations openprom_inode_operations {
  .lookup             = openpromfs_lookup,
};
openprom/super/super {
  .alloc_inode        = openprom_alloc_inode,
  .destroy_inode      = openprom_destroy_inode,
  .statfs             = simple_statfs,
  .remount_fs         = openprom_remount,
};
openprom/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "openpromfs",
  .mount              = openprom_mount,
  .kill_sb            = kill_anon_super,
};
proc/inode/file {
  .setattr            = proc_notify_change,
};
inode_operations proc_link_inode_operations {
  .readlink           = generic_readlink,
  .follow_link        = proc_follow_link,
};
proc/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = proc_readdir,
};
proc/inode/dir {
  .lookup             = proc_lookup,
  .getattr            = proc_getattr,
  .setattr            = proc_notify_change,
};
ns/file/file {
  .llseek             = no_llseek,
};
inode_operations ns_inode_operations {
  .setattr            = proc_setattr,
};
inode_operations proc_ns_link_inode_operations {
  .readlink           = proc_ns_readlink,
  .follow_link        = proc_ns_follow_link,
  .setattr            = proc_setattr,
};
proc_ns/inode/dir {
  .read               = generic_read_dir,
  .iterate            = proc_ns_dir_readdir,
};
proc_ns/inode/dir {
  .lookup             = proc_ns_dir_lookup,
  .getattr            = pid_getattr,
  .setattr            = proc_setattr,
};
inode_operations proc_net_inode_operations {
  .lookup             = proc_tgid_net_lookup,
  .getattr            = proc_tgid_net_getattr,
};
file_operations proc_net_operations {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = proc_tgid_net_readdir,
};
vm_operations_struct vmcore_mmap_ops {
  .fault              = mmap_vmcore_fault,
};
file_operations proc_vmcore_operations {
  .read               = read_vmcore,
  .llseek             = default_llseek,
  .mmap               = mmap_vmcore,
};
proc/fs/fs {
  .name               = "proc",
  .mount              = proc_mount,
  .kill_sb            = proc_kill_sb,
  .fs_flags           = FS_USERNS_MOUNT,
};
file_operations proc_root_operations {
  .read               = generic_read_dir,
  .iterate            = proc_root_readdir,
  .llseek             = default_llseek,
};
inode_operations proc_root_inode_operations {
  .lookup             = proc_root_lookup,
  .getattr            = proc_root_getattr,
};
file_operations cmdline_proc_fops {
  .open               = cmdline_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
seq_operations devinfo_ops {
  .start              = devinfo_start,
  .next               = devinfo_next,
  .stop               = devinfo_stop,
  .show               = devinfo_show
};
file_operations proc_devinfo_operations {
  .open               = devinfo_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
};
file_operations version_proc_fops {
  .open               = version_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations proc_kpagecount_operations {
  .llseek             = mem_lseek,
  .read               = kpagecount_read,
};
file_operations proc_kpageflags_operations {
  .llseek             = mem_lseek,
  .read               = kpageflags_read,
};
seq_operations consoles_op {
  .start              = c_start,
  .next               = c_next,
  .stop               = c_stop,
  .show               = show_console_dev
};
file_operations proc_consoles_operations {
  .open               = consoles_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
};
file_operations proc_softirqs_operations {
  .open               = softirqs_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
seq_operations int_seq_ops {
  .start              = int_seq_start,
  .next               = int_seq_next,
  .stop               = int_seq_stop,
  .show               = show_interrupts
};
file_operations proc_interrupts_operations {
  .open               = interrupts_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
};
inode_operations proc_self_inode_operations {
  .readlink           = proc_self_readlink,
  .follow_link        = proc_self_follow_link,
  .put_link           = kfree_put_link,
};
seq_operations proc_pid_maps_op {
  .start              = m_start,
  .next               = m_next,
  .stop               = m_stop,
  .show               = show_pid_map
};
seq_operations proc_tid_maps_op {
  .start              = m_start,
  .next               = m_next,
  .stop               = m_stop,
  .show               = show_tid_map
};
file_operations proc_pid_maps_operations {
  .open               = pid_maps_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_private,
};
file_operations proc_tid_maps_operations {
  .open               = tid_maps_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_private,
};
seq_operations proc_pid_smaps_op {
  .start              = m_start,
  .next               = m_next,
  .stop               = m_stop,
  .show               = show_pid_smap
};
seq_operations proc_tid_smaps_op {
  .start              = m_start,
  .next               = m_next,
  .stop               = m_stop,
  .show               = show_tid_smap
};
file_operations proc_pid_smaps_operations {
  .open               = pid_smaps_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_private,
};
file_operations proc_tid_smaps_operations {
  .open               = tid_smaps_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_private,
};
file_operations proc_clear_refs_operations {
  .write              = clear_refs_write,
  .llseek             = noop_llseek,
};
file_operations proc_pagemap_operations {
  .llseek             = mem_lseek,
  .read               = pagemap_read,
  .open               = pagemap_open,
};
seq_operations proc_pid_numa_maps_op {
  .start              = m_start,
  .next               = m_next,
  .stop               = m_stop,
  .show               = show_pid_numa_map,
};
seq_operations proc_tid_numa_maps_op {
  .start              = m_start,
  .next               = m_next,
  .stop               = m_stop,
  .show               = show_tid_numa_map,
};
file_operations proc_pid_numa_maps_operations {
  .open               = pid_numa_maps_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_private,
};
file_operations proc_tid_numa_maps_operations {
  .open               = tid_numa_maps_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_private,
};
file_operations loadavg_proc_fops {
  .open               = loadavg_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
seq_operations proc_nommu_region_list_seqop {
  .start              = nommu_region_list_start,
  .next               = nommu_region_list_next,
  .stop               = nommu_region_list_stop,
  .show               = nommu_region_list_show
};
file_operations proc_nommu_region_list_operations {
  .open               = proc_nommu_region_list_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
};
file_operations proc_cpuinfo_operations {
  .open               = cpuinfo_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
};
seq_operations tty_drivers_op {
  .start              = t_start,
  .next               = t_next,
  .stop               = t_stop,
  .show               = show_tty_driver
};
file_operations proc_tty_drivers_operations {
  .open               = tty_drivers_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release,
};
proc/super/super {
  .alloc_inode        = proc_alloc_inode,
  .destroy_inode      = proc_destroy_inode,
  .drop_inode         = generic_delete_inode,
  .evict_inode        = proc_evict_inode,
  .statfs             = simple_statfs,
  .remount_fs         = proc_remount,
  .show_options       = proc_show_options,
};
file_operations proc_reg_file_ops {
  .llseek             = proc_reg_llseek,
  .read               = proc_reg_read,
  .write              = proc_reg_write,
  .poll               = proc_reg_poll,
  .unlocked_ioctl     = proc_reg_unlocked_ioctl,
  .compat_ioctl       = proc_reg_compat_ioctl,
  .mmap               = proc_reg_mmap,
  .get_unmapped_area  = proc_reg_get_unmapped_area,
  .open               = proc_reg_open,
  .release            = proc_reg_release,
};
file_operations proc_reg_file_ops_no_compat {
  .llseek             = proc_reg_llseek,
  .read               = proc_reg_read,
  .write              = proc_reg_write,
  .poll               = proc_reg_poll,
  .unlocked_ioctl     = proc_reg_unlocked_ioctl,
  .mmap               = proc_reg_mmap,
  .get_unmapped_area  = proc_reg_get_unmapped_area,
  .open               = proc_reg_open,
  .release            = proc_reg_release,
};
proc_sys/file/file {
  .open               = proc_sys_open,
  .poll               = proc_sys_poll,
  .read               = proc_sys_read,
  .write              = proc_sys_write,
  .llseek             = default_llseek,
};
proc_sys_dir/file/file {
  .read               = generic_read_dir,
  .iterate            = proc_sys_readdir,
  .llseek             = generic_file_llseek,
};
inode_operations proc_sys_inode_operations {
  .permission         = proc_sys_permission,
  .setattr            = proc_sys_setattr,
  .getattr            = proc_sys_getattr,
};
inode_operations proc_sys_dir_operations {
  .lookup             = proc_sys_lookup,
  .permission         = proc_sys_permission,
  .setattr            = proc_sys_setattr,
  .getattr            = proc_sys_getattr,
};
proc_sys/dentry/dentry {
  .d_revalidate       = proc_sys_revalidate,
  .d_delete           = proc_sys_delete,
  .d_compare          = proc_sys_compare,
};
file_operations proc_kmsg_operations {
  .read               = kmsg_read,
  .poll               = kmsg_poll,
  .open               = kmsg_open,
  .release            = kmsg_release,
  .llseek             = generic_file_llseek,
};
file_operations meminfo_proc_fops {
  .open               = meminfo_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
inode_operations proc_thread_self_inode_operations {
  .readlink           = proc_thread_self_readlink,
  .follow_link        = proc_thread_self_follow_link,
  .put_link           = kfree_put_link,
};
file_operations proc_kcore_operations {
  .read               = read_kcore,
  .open               = open_kcore,
  .llseek             = default_llseek,
};
file_operations uptime_proc_fops {
  .open               = uptime_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
proc_fdinfo/file/file {
  .open               = seq_fdinfo_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
tid_fd/dentry/dentry {
  .d_revalidate       = tid_fd_revalidate,
  .d_delete           = pid_delete_dentry,
};
file_operations proc_fd_operations {
  .read               = generic_read_dir,
  .iterate            = proc_readfd,
  .llseek             = default_llseek,
};
inode_operations proc_fd_inode_operations {
  .lookup             = proc_lookupfd,
  .permission         = proc_fd_permission,
  .setattr            = proc_setattr,
};
inode_operations proc_fdinfo_inode_operations {
  .lookup             = proc_lookupfdinfo,
  .setattr            = proc_setattr,
};
file_operations proc_fdinfo_operations {
  .read               = generic_read_dir,
  .iterate            = proc_readfdinfo,
  .llseek             = default_llseek,
};
seq_operations proc_pid_maps_ops {
  .start              = m_start,
  .next               = m_next,
  .stop               = m_stop,
  .show               = show_pid_map
};
seq_operations proc_tid_maps_ops {
  .start              = m_start,
  .next               = m_next,
  .stop               = m_stop,
  .show               = show_tid_map
};
file_operations proc_pid_maps_operations {
  .open               = pid_maps_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_private,
};
file_operations proc_tid_maps_operations {
  .open               = tid_maps_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_private,
};
file_operations proc_lstats_operations {
  .open               = lstats_open,
  .read               = seq_read,
  .write              = lstats_write,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations proc_cgroup_operations {
  .open               = cgroup_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations proc_cpuset_operations {
  .open               = cpuset_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
inode_operations proc_def_inode_operations {
  .setattr            = proc_setattr,
};
proc_single/file/file {
  .open               = proc_single_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations proc_mem_operations {
  .llseek             = mem_lseek,
  .read               = mem_read,
  .write              = mem_write,
  .open               = mem_open,
  .release            = mem_release,
};
file_operations proc_environ_operations {
  .open               = environ_open,
  .read               = environ_read,
  .llseek             = generic_file_llseek,
  .release            = mem_release,
};
file_operations proc_oom_adj_operations {
  .read               = oom_adj_read,
  .write              = oom_adj_write,
  .llseek             = generic_file_llseek,
};
file_operations proc_oom_score_adj_operations {
  .read               = oom_score_adj_read,
  .write              = oom_score_adj_write,
  .llseek             = default_llseek,
};
file_operations proc_loginuid_operations {
  .read               = proc_loginuid_read,
  .write              = proc_loginuid_write,
  .llseek             = generic_file_llseek,
};
file_operations proc_sessionid_operations {
  .read               = proc_sessionid_read,
  .llseek             = generic_file_llseek,
};
file_operations proc_fault_inject_operations {
  .read               = proc_fault_inject_read,
  .write              = proc_fault_inject_write,
  .llseek             = generic_file_llseek,
};
file_operations proc_pid_sched_operations {
  .open               = sched_open,
  .read               = seq_read,
  .write              = sched_write,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations proc_pid_sched_autogroup_operations {
  .open               = sched_autogroup_open,
  .read               = seq_read,
  .write              = sched_autogroup_write,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations proc_pid_set_comm_operations {
  .open               = comm_open,
  .read               = seq_read,
  .write              = comm_write,
  .llseek             = seq_lseek,
  .release            = single_release,
};
inode_operations proc_pid_link_inode_operations {
  .readlink           = proc_pid_readlink,
  .follow_link        = proc_pid_follow_link,
  .setattr            = proc_setattr,
};
tid_map_files/dentry/dentry {
  .d_revalidate       = map_files_d_revalidate,
  .d_delete           = pid_delete_dentry,
};
inode_operations proc_map_files_inode_operations {
  .lookup             = proc_map_files_lookup,
  .permission         = proc_fd_permission,
  .setattr            = proc_setattr,
};
file_operations proc_map_files_operations {
  .read               = generic_read_dir,
  .iterate            = proc_map_files_readdir,
  .llseek             = default_llseek,
};
seq_operations proc_timers_seq_ops {
  .start              = timers_start,
  .next               = timers_next,
  .stop               = timers_stop,
  .show               = show_timer,
};
file_operations proc_timers_operations {
  .open               = proc_timers_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = seq_release_private,
};
file_operations proc_pid_attr_operations {
  .read               = proc_pid_attr_read,
  .write              = proc_pid_attr_write,
  .llseek             = generic_file_llseek,
};
proc_attr/inode/dir {
  .read               = generic_read_dir,
  .iterate            = proc_attr_dir_readdir,
  .llseek             = default_llseek,
};
proc_attr/inode/dir {
  .lookup             = proc_attr_dir_lookup,
  .getattr            = pid_getattr,
  .setattr            = proc_setattr,
};
file_operations proc_coredump_filter_operations {
  .read               = proc_coredump_filter_read,
  .write              = proc_coredump_filter_write,
  .llseek             = generic_file_llseek,
};
file_operations proc_uid_map_operations {
  .open               = proc_uid_map_open,
  .write              = proc_uid_map_write,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = proc_id_map_release,
};
file_operations proc_gid_map_operations {
  .open               = proc_gid_map_open,
  .write              = proc_gid_map_write,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = proc_id_map_release,
};
file_operations proc_projid_map_operations {
  .open               = proc_projid_map_open,
  .write              = proc_projid_map_write,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = proc_id_map_release,
};
file_operations proc_tgid_base_operations {
  .read               = generic_read_dir,
  .iterate            = proc_tgid_base_readdir,
  .llseek             = default_llseek,
};
inode_operations proc_tgid_base_inode_operations {
  .lookup             = proc_tgid_base_lookup,
  .getattr            = pid_getattr,
  .setattr            = proc_setattr,
  .permission         = proc_pid_permission,
};
file_operations proc_tid_base_operations {
  .read               = generic_read_dir,
  .iterate            = proc_tid_base_readdir,
  .llseek             = default_llseek,
};
inode_operations proc_tid_base_inode_operations {
  .lookup             = proc_tid_base_lookup,
  .getattr            = pid_getattr,
  .setattr            = proc_setattr,
};
inode_operations proc_task_inode_operations {
  .lookup             = proc_task_lookup,
  .getattr            = proc_task_getattr,
  .setattr            = proc_setattr,
  .permission         = proc_pid_permission,
};
file_operations proc_task_operations {
  .read               = generic_read_dir,
  .iterate            = proc_task_readdir,
  .llseek             = default_llseek,
};
file_operations proc_stat_operations {
  .open               = stat_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
seq_operations children_seq_ops {
  .start              = children_seq_start,
  .next               = children_seq_next,
  .stop               = children_seq_stop,
  .show               = children_seq_show,
};
file_operations proc_tid_children_operations {
  .open               = children_seq_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = children_seq_release,
};
seq_operations pstore_ftrace_seq_ops {
  .start              = pstore_ftrace_seq_start,
  .next               = pstore_ftrace_seq_next,
  .stop               = pstore_ftrace_seq_stop,
  .show               = pstore_ftrace_seq_show,
};
pstore/file/file {
  .open               = pstore_file_open,
  .read               = pstore_file_read,
  .llseek             = pstore_file_llseek,
  .release            = seq_release,
};
pstore/inode/dir {
  .lookup             = simple_lookup,
  .unlink             = pstore_unlink,
};
super_operations pstore_ops {
  .statfs             = simple_statfs,
  .drop_inode         = generic_delete_inode,
  .evict_inode        = pstore_evict_inode,
  .remount_fs         = pstore_remount,
  .show_options       = generic_show_options,
};
pstore/fs/fs {
  .name               = "pstore",
  .mount              = pstore_mount,
  .kill_sb            = pstore_kill_sb,
};
file_operations pstore_knob_fops {
  .open               = simple_open,
  .read               = pstore_ftrace_knob_read,
  .write              = pstore_ftrace_knob_write,
};
qnx4/addr/addr {
  .readpage           = qnx4_readpage,
  .bmap               = qnx4_bmap
};
qnx4/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "qnx4",
  .mount              = qnx4_mount,
  .kill_sb            = qnx4_kill_sb,
  .fs_flags           = FS_REQUIRES_DEV,
};
qnx6/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = qnx6_readdir,
  .fsync              = generic_file_fsync,
};
qnx6/inode/dir {
  .lookup             = qnx6_lookup,
};
qnx6/super/super {
  .alloc_inode        = qnx6_alloc_inode,
  .destroy_inode      = qnx6_destroy_inode,
  .put_super          = qnx6_put_super,
  .statfs             = qnx6_statfs,
  .remount_fs         = qnx6_remount,
  .show_options       = qnx6_show_options,
};
qnx6/addr/addr {
  .readpage           = qnx6_readpage,
  .readpages          = qnx6_readpages,
  .bmap               = qnx6_bmap
};
qnx6/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "qnx6",
  .mount              = qnx6_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
dquot_operations dquot_operations {
  .write_dquot        = dquot_commit,
  .acquire_dquot      = dquot_acquire,
  .release_dquot      = dquot_release,
  .mark_dirty         = dquot_mark_dquot_dirty,
  .write_info         = dquot_commit_info,
  .alloc_dquot        = dquot_alloc,
  .destroy_dquot      = dquot_destroy,
};
quotactl_ops dquot_quotactl_ops {
  .quota_on           = dquot_quota_on,
  .quota_off          = dquot_quota_off,
  .quota_sync         = dquot_quota_sync,
  .get_info           = dquot_get_dqinfo,
  .set_info           = dquot_set_dqinfo,
  .get_dqblk          = dquot_get_dqblk,
  .set_dqblk          = dquot_set_dqblk
};
ramfs/file/file {
  .mmap               = ramfs_nommu_mmap,
  .get_unmapped_area  = ramfs_nommu_get_unmapped_area,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .write              = new_sync_write,
  .write_iter         = generic_file_write_iter,
  .fsync              = noop_fsync,
  .splice_read        = generic_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .llseek             = generic_file_llseek,
};
ramfs/inode/file {
  .setattr            = ramfs_nommu_setattr,
  .getattr            = simple_getattr,
};
ramfs/addr/addr {
  .readpage           = simple_readpage,
  .write_begin        = simple_write_begin,
  .write_end          = simple_write_end,
  .set_page_dirty     = __set_page_dirty_no_writeback,
};
ramfs/inode/dir {
  .create             = ramfs_create,
  .lookup             = simple_lookup,
  .link               = simple_link,
  .unlink             = simple_unlink,
  .symlink            = ramfs_symlink,
  .mkdir              = ramfs_mkdir,
  .rmdir              = simple_rmdir,
  .mknod              = ramfs_mknod,
  .rename             = simple_rename,
};
super_operations ramfs_ops {
  .statfs             = simple_statfs,
  .drop_inode         = generic_delete_inode,
  .show_options       = generic_show_options,
};
ramfs/fs/fs {
  .name               = "ramfs",
  .mount              = ramfs_mount,
  .kill_sb            = ramfs_kill_sb,
  .fs_flags           = FS_USERNS_MOUNT,
};
ramfs/file/file {
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .write              = new_sync_write,
  .write_iter         = generic_file_write_iter,
  .mmap               = generic_file_mmap,
  .fsync              = noop_fsync,
  .splice_read        = generic_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .llseek             = generic_file_llseek,
};
ramfs/inode/file {
  .setattr            = simple_setattr,
  .getattr            = simple_getattr,
};
reiserfs/xattr/security {
  .prefix             = XATTR_SECURITY_PREFIX,
  .get                = security_get,
  .set                = security_set,
  .list               = security_list,
};
reiserfs/xattr/trusted {
  .prefix             = XATTR_TRUSTED_PREFIX,
  .get                = trusted_get,
  .set                = trusted_set,
  .list               = trusted_list,
};
reiserfs/inode/dir {
  .create             = reiserfs_create,
  .lookup             = reiserfs_lookup,
  .link               = reiserfs_link,
  .unlink             = reiserfs_unlink,
  .symlink            = reiserfs_symlink,
  .mkdir              = reiserfs_mkdir,
  .rmdir              = reiserfs_rmdir,
  .mknod              = reiserfs_mknod,
  .rename             = reiserfs_rename,
  .setattr            = reiserfs_setattr,
  .setxattr           = reiserfs_setxattr,
  .getxattr           = reiserfs_getxattr,
  .listxattr          = reiserfs_listxattr,
  .removexattr        = reiserfs_removexattr,
  .permission         = reiserfs_permission,
  .get_acl            = reiserfs_get_acl,
  .set_acl            = reiserfs_set_acl,
};
reiserfs/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .setattr            = reiserfs_setattr,
  .setxattr           = reiserfs_setxattr,
  .getxattr           = reiserfs_getxattr,
  .listxattr          = reiserfs_listxattr,
  .removexattr        = reiserfs_removexattr,
  .permission         = reiserfs_permission,
};
reiserfs/inode/special {
  .setattr            = reiserfs_setattr,
  .setxattr           = reiserfs_setxattr,
  .getxattr           = reiserfs_getxattr,
  .listxattr          = reiserfs_listxattr,
  .removexattr        = reiserfs_removexattr,
  .permission         = reiserfs_permission,
  .get_acl            = reiserfs_get_acl,
  .set_acl            = reiserfs_set_acl,
};
reiserfs/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = reiserfs_readdir,
  .fsync              = reiserfs_dir_fsync,
  .unlocked_ioctl     = reiserfs_ioctl,
  .compat_ioctl       = reiserfs_compat_ioctl,
};
r/file/file {
  .open               = r_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
reiserfs/super/super {
  .alloc_inode        = reiserfs_alloc_inode,
  .destroy_inode      = reiserfs_destroy_inode,
  .write_inode        = reiserfs_write_inode,
  .dirty_inode        = reiserfs_dirty_inode,
  .evict_inode        = reiserfs_evict_inode,
  .put_super          = reiserfs_put_super,
  .sync_fs            = reiserfs_sync_fs,
  .freeze_fs          = reiserfs_freeze,
  .unfreeze_fs        = reiserfs_unfreeze,
  .statfs             = reiserfs_statfs,
  .remount_fs         = reiserfs_remount,
  .show_options       = reiserfs_show_options,
  .quota_read         = reiserfs_quota_read,
  .quota_write        = reiserfs_quota_write,
};
dquot_operations reiserfs_quota_operations {
  .write_dquot        = reiserfs_write_dquot,
  .acquire_dquot      = reiserfs_acquire_dquot,
  .release_dquot      = reiserfs_release_dquot,
  .mark_dirty         = reiserfs_mark_dquot_dirty,
  .write_info         = reiserfs_write_info,
  .alloc_dquot        = dquot_alloc,
  .destroy_dquot      = dquot_destroy,
};
quotactl_ops reiserfs_qctl_operations {
  .quota_on           = reiserfs_quota_on,
  .quota_off          = dquot_quota_off,
  .quota_sync         = dquot_quota_sync,
  .get_info           = dquot_get_dqinfo,
  .set_info           = dquot_set_dqinfo,
  .get_dqblk          = dquot_get_dqblk,
  .set_dqblk          = dquot_set_dqblk,
};
export_operations reiserfs_export_ops {
  .encode_fh          = reiserfs_encode_fh,
  .fh_to_dentry       = reiserfs_fh_to_dentry,
  .fh_to_parent       = reiserfs_fh_to_parent,
  .get_parent         = reiserfs_get_parent,
};
reiserfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "reiserfs",
  .mount              = get_super_block,
  .kill_sb            = reiserfs_kill_sb,
  .fs_flags           = FS_REQUIRES_DEV,
};
address_space_operations reiserfs_address_space_operations {
  .writepage          = reiserfs_writepage,
  .readpage           = reiserfs_readpage,
  .readpages          = reiserfs_readpages,
  .releasepage        = reiserfs_releasepage,
  .invalidatepage     = reiserfs_invalidatepage,
  .write_begin        = reiserfs_write_begin,
  .write_end          = reiserfs_write_end,
  .bmap               = reiserfs_aop_bmap,
  .direct_IO          = reiserfs_direct_IO,
  .set_page_dirty     = reiserfs_set_page_dirty,
};
reiserfs/file/file {
  .read               = new_sync_read,
  .write              = new_sync_write,
  .unlocked_ioctl     = reiserfs_ioctl,
  .compat_ioctl       = reiserfs_compat_ioctl,
  .mmap               = generic_file_mmap,
  .open               = reiserfs_file_open,
  .release            = reiserfs_file_release,
  .fsync              = reiserfs_sync_file,
  .read_iter          = generic_file_read_iter,
  .write_iter         = generic_file_write_iter,
  .splice_read        = generic_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .llseek             = generic_file_llseek,
};
reiserfs/inode/file {
  .setattr            = reiserfs_setattr,
  .setxattr           = reiserfs_setxattr,
  .getxattr           = reiserfs_getxattr,
  .listxattr          = reiserfs_listxattr,
  .removexattr        = reiserfs_removexattr,
  .permission         = reiserfs_permission,
  .get_acl            = reiserfs_get_acl,
  .set_acl            = reiserfs_set_acl,
};
reiserfs/xattr/user {
  .prefix             = XATTR_USER_PREFIX,
  .get                = user_get,
  .set                = user_set,
  .list               = user_list,
};
dentry_operations xattr_lookup_poison_ops {
  .d_revalidate       = xattr_hide_revalidate,
};
romfs/addr/addr {
  .readpage           = romfs_readpage
};
romfs/inode/dir {
  .read               = generic_read_dir,
  .iterate            = romfs_readdir,
  .llseek             = default_llseek,
};
romfs/inode/dir {
  .lookup             = romfs_lookup,
};
romfs/super/super {
  .alloc_inode        = romfs_alloc_inode,
  .destroy_inode      = romfs_destroy_inode,
  .statfs             = romfs_statfs,
  .remount_fs         = romfs_remount,
};
romfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "romfs",
  .mount              = romfs_mount,
  .kill_sb            = romfs_kill_sb,
  .fs_flags           = FS_REQUIRES_DEV,
};
file_operations romfs_ro_fops {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .splice_read        = generic_file_splice_read,
  .mmap               = romfs_mmap,
  .get_unmapped_area  = romfs_get_unmapped_area,
};
inode_operations squashfs_dir_inode_ops {
  .lookup             = squashfs_lookup,
  .getxattr           = generic_getxattr,
  .listxattr          = squashfs_listxattr
};
file_operations squashfs_dir_ops {
  .read               = generic_read_dir,
  .iterate            = squashfs_readdir,
  .llseek             = default_llseek,
};
export_operations squashfs_export_ops {
  .fh_to_dentry       = squashfs_fh_to_dentry,
  .fh_to_parent       = squashfs_fh_to_parent,
  .get_parent         = squashfs_get_parent
};
squashfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "squashfs",
  .mount              = squashfs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV
};
squashfs/super/super {
  .alloc_inode        = squashfs_alloc_inode,
  .destroy_inode      = squashfs_destroy_inode,
  .statfs             = squashfs_statfs,
  .put_super          = squashfs_put_super,
  .remount_fs         = squashfs_remount
};
inode_operations squashfs_inode_ops {
  .getxattr           = generic_getxattr,
  .listxattr          = squashfs_listxattr
};
squashfs/addr/addr {
  .readpage           = squashfs_readpage
};
squashfs_symlink/addr/addr {
  .readpage           = squashfs_symlink_readpage
};
inode_operations squashfs_symlink_inode_ops {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .getxattr           = generic_getxattr,
  .listxattr          = squashfs_listxattr
};
squashfs/xattr/user {
  .prefix             = XATTR_USER_PREFIX,
  .list               = squashfs_user_list,
  .get                = squashfs_user_get
};
squashfs/xattr/trusted {
  .prefix             = XATTR_TRUSTED_PREFIX,
  .list               = squashfs_trusted_list,
  .get                = squashfs_trusted_get
};
squashfs/xattr/security {
  .prefix             = XATTR_SECURITY_PREFIX,
  .list               = squashfs_security_list,
  .get                = squashfs_security_get
};
sysfs/fs/fs {
  .name               = "sysfs",
  .mount              = sysfs_mount,
  .kill_sb            = sysfs_kill_sb,
  .fs_flags           = FS_USERNS_MOUNT,
};
sysv/dentry/dentry {
  .d_hash             = sysv_hash,
};
sysv/inode/dir {
  .create             = sysv_create,
  .lookup             = sysv_lookup,
  .link               = sysv_link,
  .unlink             = sysv_unlink,
  .symlink            = sysv_symlink,
  .mkdir              = sysv_mkdir,
  .rmdir              = sysv_rmdir,
  .mknod              = sysv_mknod,
  .rename             = sysv_rename,
  .getattr            = sysv_getattr,
};
sysv/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = sysv_readdir,
  .fsync              = generic_file_fsync,
};
sysv/addr/addr {
  .readpage           = sysv_readpage,
  .writepage          = sysv_writepage,
  .write_begin        = sysv_write_begin,
  .write_end          = generic_write_end,
  .bmap               = sysv_bmap
};
sysv/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "sysv",
  .mount              = sysv_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
v7/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "v7",
  .mount              = v7_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
sysv/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .getattr            = sysv_getattr,
};
sysv/super/super {
  .alloc_inode        = sysv_alloc_inode,
  .destroy_inode      = sysv_destroy_inode,
  .write_inode        = sysv_write_inode,
  .evict_inode        = sysv_evict_inode,
  .put_super          = sysv_put_super,
  .sync_fs            = sysv_sync_fs,
  .remount_fs         = sysv_remount,
  .statfs             = sysv_statfs,
};
sysv/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .write              = new_sync_write,
  .write_iter         = generic_file_write_iter,
  .mmap               = generic_file_mmap,
  .fsync              = generic_file_fsync,
  .splice_read        = generic_file_splice_read,
};
sysv/inode/file {
  .setattr            = sysv_setattr,
  .getattr            = sysv_getattr,
};
sysv_fast/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = sysv_follow_link,
};
ubifs/inode/dir {
  .lookup             = ubifs_lookup,
  .create             = ubifs_create,
  .link               = ubifs_link,
  .symlink            = ubifs_symlink,
  .unlink             = ubifs_unlink,
  .mkdir              = ubifs_mkdir,
  .rmdir              = ubifs_rmdir,
  .mknod              = ubifs_mknod,
  .rename             = ubifs_rename,
  .setattr            = ubifs_setattr,
  .getattr            = ubifs_getattr,
  .setxattr           = ubifs_setxattr,
  .getxattr           = ubifs_getxattr,
  .listxattr          = ubifs_listxattr,
  .removexattr        = ubifs_removexattr,
};
ubifs/inode/dir {
  .llseek             = generic_file_llseek,
  .release            = ubifs_dir_release,
  .read               = generic_read_dir,
  .iterate            = ubifs_readdir,
  .fsync              = ubifs_fsync,
  .unlocked_ioctl     = ubifs_ioctl,
  .compat_ioctl       = ubifs_compat_ioctl,
};
ubifs/super/super {
  .alloc_inode        = ubifs_alloc_inode,
  .destroy_inode      = ubifs_destroy_inode,
  .put_super          = ubifs_put_super,
  .write_inode        = ubifs_write_inode,
  .evict_inode        = ubifs_evict_inode,
  .statfs             = ubifs_statfs,
  .dirty_inode        = ubifs_dirty_inode,
  .remount_fs         = ubifs_remount_fs,
  .show_options       = ubifs_show_options,
  .sync_fs            = ubifs_sync_fs,
};
ubifs/fs/fs {
  .name               = "ubifs",
  .owner              = THIS_MODULE,
  .mount              = ubifs_mount,
  .kill_sb            = kill_ubifs_super,
};
file_operations dfs_fops {
  .open               = dfs_file_open,
  .read               = dfs_file_read,
  .write              = dfs_file_write,
  .owner              = THIS_MODULE,
  .llseek             = no_llseek,
};
file_operations dfs_global_fops {
  .read               = dfs_global_file_read,
  .write              = dfs_global_file_write,
  .owner              = THIS_MODULE,
  .llseek             = no_llseek,
};
ubifs/vm/file {
  .fault              = filemap_fault,
  .map_pages          = filemap_map_pages,
  .page_mkwrite       = ubifs_vm_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
address_space_operations ubifs_file_address_operations {
  .readpage           = ubifs_readpage,
  .writepage          = ubifs_writepage,
  .write_begin        = ubifs_write_begin,
  .write_end          = ubifs_write_end,
  .invalidatepage     = ubifs_invalidatepage,
  .set_page_dirty     = ubifs_set_page_dirty,
  .releasepage        = ubifs_releasepage,
};
ubifs/inode/file {
  .setattr            = ubifs_setattr,
  .getattr            = ubifs_getattr,
  .setxattr           = ubifs_setxattr,
  .getxattr           = ubifs_getxattr,
  .listxattr          = ubifs_listxattr,
  .removexattr        = ubifs_removexattr,
};
ubifs/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = ubifs_follow_link,
  .setattr            = ubifs_setattr,
  .getattr            = ubifs_getattr,
};
ubifs/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = generic_file_read_iter,
  .write_iter         = ubifs_write_iter,
  .mmap               = ubifs_file_mmap,
  .fsync              = ubifs_fsync,
  .unlocked_ioctl     = ubifs_ioctl,
  .splice_read        = generic_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .compat_ioctl       = ubifs_compat_ioctl,
};
export_operations udf_export_ops {
  .encode_fh          = udf_encode_fh,
  .fh_to_dentry       = udf_fh_to_dentry,
  .fh_to_parent       = udf_fh_to_parent,
  .get_parent         = udf_get_parent,
};
udf/inode/dir {
  .lookup             = udf_lookup,
  .create             = udf_create,
  .link               = udf_link,
  .unlink             = udf_unlink,
  .symlink            = udf_symlink,
  .mkdir              = udf_mkdir,
  .rmdir              = udf_rmdir,
  .mknod              = udf_mknod,
  .rename             = udf_rename,
  .tmpfile            = udf_tmpfile,
};
udf/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
};
udf/inode/dir {
  .llseek             = generic_file_llseek,
  .read               = generic_read_dir,
  .iterate            = udf_readdir,
  .unlocked_ioctl     = udf_ioctl,
  .fsync              = generic_file_fsync,
};
file_system_type udf_fstype {
  .owner              = THIS_MODULE,
  .name               = "udf",
  .mount              = udf_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
super_operations udf_sb_ops {
  .alloc_inode        = udf_alloc_inode,
  .destroy_inode      = udf_destroy_inode,
  .write_inode        = udf_write_inode,
  .evict_inode        = udf_evict_inode,
  .put_super          = udf_put_super,
  .sync_fs            = udf_sync_fs,
  .statfs             = udf_statfs,
  .remount_fs         = udf_remount_fs,
  .show_options       = udf_show_options,
};
udf/addr/addr {
  .readpage           = udf_readpage,
  .readpages          = udf_readpages,
  .writepage          = udf_writepage,
  .writepages         = udf_writepages,
  .write_begin        = udf_write_begin,
  .write_end          = generic_write_end,
  .direct_IO          = udf_direct_IO,
  .bmap               = udf_bmap,
};
udf_adinicb/addr/addr {
  .readpage           = udf_adinicb_readpage,
  .writepage          = udf_adinicb_writepage,
  .write_begin        = udf_adinicb_write_begin,
  .write_end          = simple_write_end,
  .direct_IO          = udf_adinicb_direct_IO,
};
udf/file/file {
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .unlocked_ioctl     = udf_ioctl,
  .open               = generic_file_open,
  .mmap               = generic_file_mmap,
  .write              = new_sync_write,
  .write_iter         = udf_file_write_iter,
  .release            = udf_release_file,
  .fsync              = generic_file_fsync,
  .splice_read        = generic_file_splice_read,
  .llseek             = generic_file_llseek,
};
udf/inode/file {
  .setattr            = udf_setattr,
};
udf_symlink/addr/addr {
  .readpage           = udf_symlink_filler,
};
ufs/inode/dir {
  .create             = ufs_create,
  .lookup             = ufs_lookup,
  .link               = ufs_link,
  .unlink             = ufs_unlink,
  .symlink            = ufs_symlink,
  .mkdir              = ufs_mkdir,
  .rmdir              = ufs_rmdir,
  .mknod              = ufs_mknod,
  .rename             = ufs_rename,
};
ufs/inode/dir {
  .read               = generic_read_dir,
  .iterate            = ufs_readdir,
  .fsync              = generic_file_fsync,
  .llseek             = generic_file_llseek,
};
export_operations ufs_export_ops {
  .fh_to_dentry       = ufs_fh_to_dentry,
  .fh_to_parent       = ufs_fh_to_parent,
  .get_parent         = ufs_get_parent,
};
ufs/super/super {
  .alloc_inode        = ufs_alloc_inode,
  .destroy_inode      = ufs_destroy_inode,
  .write_inode        = ufs_write_inode,
  .evict_inode        = ufs_evict_inode,
  .put_super          = ufs_put_super,
  .sync_fs            = ufs_sync_fs,
  .statfs             = ufs_statfs,
  .remount_fs         = ufs_remount,
  .show_options       = ufs_show_options,
};
ufs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "ufs",
  .mount              = ufs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
ufs/addr/addr {
  .readpage           = ufs_readpage,
  .writepage          = ufs_writepage,
  .write_begin        = ufs_write_begin,
  .write_end          = generic_write_end,
  .bmap               = ufs_bmap
};
ufs/file/file {
  .llseek             = generic_file_llseek,
  .read               = new_sync_read,
  .read_iter          = generic_file_read_iter,
  .write              = new_sync_write,
  .write_iter         = generic_file_write_iter,
  .mmap               = generic_file_mmap,
  .open               = generic_file_open,
  .fsync              = generic_file_fsync,
  .splice_read        = generic_file_splice_read,
};
ufs_fast/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = ufs_follow_link,
  .setattr            = ufs_setattr,
};
ufs/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = page_follow_link_light,
  .put_link           = page_put_link,
  .setattr            = ufs_setattr,
};
ufs/inode/file {
  .setattr            = ufs_setattr,
};
xfs/xattr/user {
  .prefix             = XATTR_USER_PREFIX,
  .get                = xfs_xattr_get,
  .set                = xfs_xattr_set,
};
xfs/xattr/trusted {
  .prefix             = XATTR_TRUSTED_PREFIX,
  .flags              = ATTR_ROOT,
  .get                = xfs_xattr_get,
  .set                = xfs_xattr_set,
};
xfs/xattr/security {
  .prefix             = XATTR_SECURITY_PREFIX,
  .flags              = ATTR_SECURE,
  .get                = xfs_xattr_get,
  .set                = xfs_xattr_set,
};
sysfs_ops xfs_log_ops {
  .show               = xfs_log_show,
  .store              = xfs_log_store,
};
file_operations xfs_stat_proc_fops {
  .owner              = THIS_MODULE,
  .open               = xfs_stat_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations xqm_proc_fops {
  .owner              = THIS_MODULE,
  .open               = xqm_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
file_operations xqmstat_proc_fops {
  .owner              = THIS_MODULE,
  .open               = xqmstat_proc_open,
  .read               = seq_read,
  .llseek             = seq_lseek,
  .release            = single_release,
};
address_space_operations xfs_address_space_operations {
  .readpage           = xfs_vm_readpage,
  .readpages          = xfs_vm_readpages,
  .writepage          = xfs_vm_writepage,
  .writepages         = xfs_vm_writepages,
  .releasepage        = xfs_vm_releasepage,
  .invalidatepage     = xfs_vm_invalidatepage,
  .write_begin        = xfs_vm_write_begin,
  .write_end          = xfs_vm_write_end,
  .bmap               = xfs_vm_bmap,
  .direct_IO          = xfs_vm_direct_IO,
  .migratepage        = buffer_migrate_page,
  .is_partially_uptodate= block_is_partially_uptodate,
  .error_remove_page  = generic_error_remove_page,
};
xfs/file/file {
  .llseek             = xfs_file_llseek,
  .read               = new_sync_read,
  .write              = new_sync_write,
  .read_iter          = xfs_file_read_iter,
  .write_iter         = xfs_file_write_iter,
  .splice_read        = xfs_file_splice_read,
  .splice_write       = iter_file_splice_write,
  .unlocked_ioctl     = xfs_file_ioctl,
  .compat_ioctl       = xfs_file_compat_ioctl,
  .mmap               = xfs_file_mmap,
  .open               = xfs_file_open,
  .release            = xfs_file_release,
  .fsync              = xfs_file_fsync,
  .fallocate          = xfs_file_fallocate,
};
xfs_dir/file/file {
  .open               = xfs_dir_open,
  .read               = generic_read_dir,
  .iterate            = xfs_file_readdir,
  .llseek             = generic_file_llseek,
  .unlocked_ioctl     = xfs_file_ioctl,
  .compat_ioctl       = xfs_file_compat_ioctl,
  .fsync              = xfs_dir_fsync,
};
xfs/vm/file {
  .fault              = filemap_fault,
  .map_pages          = filemap_map_pages,
  .page_mkwrite       = xfs_vm_page_mkwrite,
  .remap_pages        = generic_file_remap_pages,
};
xfs/super/super {
  .alloc_inode        = xfs_fs_alloc_inode,
  .destroy_inode      = xfs_fs_destroy_inode,
  .evict_inode        = xfs_fs_evict_inode,
  .drop_inode         = xfs_fs_drop_inode,
  .put_super          = xfs_fs_put_super,
  .sync_fs            = xfs_fs_sync_fs,
  .freeze_fs          = xfs_fs_freeze,
  .unfreeze_fs        = xfs_fs_unfreeze,
  .statfs             = xfs_fs_statfs,
  .remount_fs         = xfs_fs_remount,
  .show_options       = xfs_fs_show_options,
  .nr_cached_objects  = xfs_fs_nr_cached_objects,
  .free_cached_objects= xfs_fs_free_cached_objects,
};
xfs/fs/fs {
  .owner              = THIS_MODULE,
  .name               = "xfs",
  .mount              = xfs_fs_mount,
  .kill_sb            = kill_block_super,
  .fs_flags           = FS_REQUIRES_DEV,
};
quotactl_ops xfs_quotactl_operations {
  .get_xstatev        = xfs_fs_get_xstatev,
  .get_xstate         = xfs_fs_get_xstate,
  .set_xstate         = xfs_fs_set_xstate,
  .rm_xquota          = xfs_fs_rm_xquota,
  .get_dqblk          = xfs_fs_get_dqblk,
  .set_dqblk          = xfs_fs_set_dqblk,
};
inode_operations xfs_inode_operations {
  .get_acl            = xfs_get_acl,
  .set_acl            = xfs_set_acl,
  .getattr            = xfs_vn_getattr,
  .setattr            = xfs_vn_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .removexattr        = generic_removexattr,
  .listxattr          = xfs_vn_listxattr,
  .fiemap             = xfs_vn_fiemap,
  .update_time        = xfs_vn_update_time,
};
xfs/inode/dir {
  .create             = xfs_vn_create,
  .lookup             = xfs_vn_lookup,
  .link               = xfs_vn_link,
  .unlink             = xfs_vn_unlink,
  .symlink            = xfs_vn_symlink,
  .mkdir              = xfs_vn_mkdir,
  .rmdir              = xfs_vn_unlink,
  .mknod              = xfs_vn_mknod,
  .rename             = xfs_vn_rename,
  .get_acl            = xfs_get_acl,
  .set_acl            = xfs_set_acl,
  .getattr            = xfs_vn_getattr,
  .setattr            = xfs_vn_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .removexattr        = generic_removexattr,
  .listxattr          = xfs_vn_listxattr,
  .update_time        = xfs_vn_update_time,
  .tmpfile            = xfs_vn_tmpfile,
};
inode_operations xfs_dir_ci_inode_operations {
  .create             = xfs_vn_create,
  .lookup             = xfs_vn_ci_lookup,
  .link               = xfs_vn_link,
  .unlink             = xfs_vn_unlink,
  .symlink            = xfs_vn_symlink,
  .mkdir              = xfs_vn_mkdir,
  .rmdir              = xfs_vn_unlink,
  .mknod              = xfs_vn_mknod,
  .rename             = xfs_vn_rename,
  .get_acl            = xfs_get_acl,
  .set_acl            = xfs_set_acl,
  .getattr            = xfs_vn_getattr,
  .setattr            = xfs_vn_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .removexattr        = generic_removexattr,
  .listxattr          = xfs_vn_listxattr,
  .update_time        = xfs_vn_update_time,
  .tmpfile            = xfs_vn_tmpfile,
};
xfs/inode/symlink {
  .readlink           = generic_readlink,
  .follow_link        = xfs_vn_follow_link,
  .put_link           = kfree_put_link,
  .getattr            = xfs_vn_getattr,
  .setattr            = xfs_vn_setattr,
  .setxattr           = generic_setxattr,
  .getxattr           = generic_getxattr,
  .removexattr        = generic_removexattr,
  .listxattr          = xfs_vn_listxattr,
  .update_time        = xfs_vn_update_time,
};
xfs/export/export {
  .encode_fh          = xfs_fs_encode_fh,
  .fh_to_dentry       = xfs_fs_fh_to_dentry,
  .fh_to_parent       = xfs_fs_fh_to_parent,
  .get_parent         = xfs_fs_get_parent,
  .commit_metadata    = xfs_fs_nfs_commit_metadata,
};
